ifeq "$(shell if [ -r ../Makefile.include ]; then echo yes; fi)" "yes"
include ../Makefile.include
else
ifeq "$(shell if [ -r $(ALPINO_HOME)/Makefile.include ]; then echo yes; fi)" "yes"
include $(ALPINO_HOME)/Makefile.include
endif
endif

SHELL=/bin/bash

default:
	@echo "make testN suite=SUITE"
	@echo "will run Alpino on the test suite ../Suites/SUITE"
	@echo "and will compare the results with the treebank in"
	@echo "../Treebank/SUITE/"
	@echo "It will find all results, including the best possible result"
	@echo "for SUITE would be for the current grammar."
	@echo "Default options are specified in this Makefile using"
	@echo "variable SUITE_test1_options and SUITE_testN_options"
	@echo "You can always specify extra=\"<various alpino options>\" to"
	@echo "pass on any non-default options to Alpino."
	@echo
	@echo
	@echo "Each run creates its own working directory"
	@echo "for temporary stuff; in addition it appends summarizing"
	@echo "statistics to some of the files in a directory dedicated"
	@echo "to that suite."

include $(ALPINO_HOME)/Makefile.test

## defaults for testN target
default_testN_options=-testN stop_if_optimal=off user_max=900000 max_sentence_length=25 use_guides=on

## defaults per suite for testN target
ovistrain_testN_options=-flag treebank ../Treebank/ovis
oviswg_testN_options=-flag treebank ../Treebank/ovis
wpspel_testN_options=-flag treebank ../Treebank/wpspel
g_suite_options=robustness=off
h_suite_options=robustness=off
i_suite_options=robustness=off
j_suite_options=robustness=off


lassysmall_options=suite_shortest_first=on -flag treebank $(ALPINO_HOME)/Treebank/LassySmall stop_if_optimal=on

lassysmall_part00001_testN_options=$(lassysmall_options)
lassysmall_part00002_testN_options=$(lassysmall_options)
lassysmall_part00003_testN_options=$(lassysmall_options)
lassysmall_part00004_testN_options=$(lassysmall_options)
lassysmall_part00005_testN_options=$(lassysmall_options)
lassysmall_part00006_testN_options=$(lassysmall_options)
lassysmall_part00007_testN_options=$(lassysmall_options)
lassysmall_part00008_testN_options=$(lassysmall_options)
lassysmall_part00009_testN_options=$(lassysmall_options)
lassysmall_part00010_testN_options=$(lassysmall_options)
lassysmall_part00011_testN_options=$(lassysmall_options)
lassysmall_part00012_testN_options=$(lassysmall_options)
lassysmall_part00013_testN_options=$(lassysmall_options)
lassysmall_part00014_testN_options=$(lassysmall_options)
lassysmall_part00015_testN_options=$(lassysmall_options)
lassysmall_part00016_testN_options=$(lassysmall_options)
lassysmall_part00017_testN_options=$(lassysmall_options)
lassysmall_part00018_testN_options=$(lassysmall_options)
lassysmall_part00019_testN_options=$(lassysmall_options)
lassysmall_part00020_testN_options=$(lassysmall_options)
lassysmall_part00021_testN_options=$(lassysmall_options)
lassysmall_part00022_testN_options=$(lassysmall_options)
lassysmall_part00023_testN_options=$(lassysmall_options)
lassysmall_part00024_testN_options=$(lassysmall_options)
lassysmall_part00025_testN_options=$(lassysmall_options)

cdb_options=suite_shortest_first=on -flag treebank $(ALPINO_HOME)/Treebank/cdb

cdb_part00001_testN_options=$(cdb_options)
cdb_part00002_testN_options=$(cdb_options)
cdb_part00003_testN_options=$(cdb_options)
cdb_part00004_testN_options=$(cdb_options)
cdb_part00005_testN_options=$(cdb_options)
cdb_part00006_testN_options=$(cdb_options)
cdb_part00007_testN_options=$(cdb_options)
cdb_part00008_testN_options=$(cdb_options)
cdb_part00009_testN_options=$(cdb_options)
cdb_part00010_testN_options=$(cdb_options)

job := job${shell echo $$$$}

testN: $(suite).testN

%.testN:%
	mkdir -p $*/$(job)
	echo "extra=$(extra)" >> $*/bests
	-$(MAKE) trees dir=$*/$(job) suite=$*
	$(MAKE) testNrest dir=$*/$(job) suite=$*

testNrest:
	$(MAKE) -s bestall dir=$(dir) | tee $(dir)/bests
	cat $(dir)/bests >> $(shell dirname $(dir)| xargs basename)/bests
	grep 'cputime total' $(dir)/log      > $(dir)/time
	-grep '^T#' $(dir)/log              >> $(dir)/time
	grep 'BEST SCORE' $(dir)/log         > $(dir)/best
	$(MAKE) -s --no-print-directory bestall dir=$(dir) \
                                             >> $(dir)/best
	$(MAKE) report  suite=$(shell dirname $(dir)| xargs basename)

trees:
	@echo > $(dir)/times
	hostname -f >>$(dir)/times
	@echo `date` >> $(dir)/times
	@echo `hostname` >> $(dir)/times
	@echo "extra=$(extra)" >> $(dir)/times
	echo "parser_comparisons." | \
        $(ALPINO)\
          -flag suite $(suitepath)/$(suite)\
          $(default_testN_options)\
          $($(suite)_testN_options)\
          $(extra) -notk cmdint=off\
                          2>$(dir)/log | tee -a $(dir)/times
	@cat $(dir)/times >> $(suite)/times



## REPORTING STATISTICS ETC

cb: $(JOBS:%/log=%/compare)

COMPARE_C=$(ALPINO_HOME)/compare_c

%/compare: %/log
	@echo $(dir $(dir $*))
	-@$(COMPARE_C) $(dir $(dir $*))\
          <( grep 'BEST SCORE' $< | awk '{ print $$11, $$3, $$15 }' ) \
          <( grep 'BEST SCORE' $(dir $(dir $*))/best | awk '{ print $$11, $$3, $$15 }' ) 

## make bestall dir=DIR
## computes average BEST/WORST/FIRST score, based on DIR/log
## the log file should have been created with end_hook=best_score

bestall:
	$(MAKE) bestall0 grep=BEST
	$(MAKE) bestall0 grep=FIRST
	$(MAKE) bestall0 grep=WORST
	@grep 'solution(s)' $(dir)/log |\
                    awk 'BEGIN {N=0; T=0}\
                               {N=N+1; T=T+$$2}\
                         END   {printf "%d sentences\n%.2f readings/sentence\n",N,T/N}' 


bestall0:
	@grep '$(grep) SCORE' $(dir)/log |\
        awk '{ PEN=($$7 > $$9 ? $$7 : $$9)-$$5; P=P+PEN; N=N+($$7 > $$9 ? $$7 : $$9); T++; CA=CA+$$3} END { printf "$(grep): ca-score: %.3f\n", 100*(1-P/N); printf "$(grep): per-sent: %.3f\n",CA/T}'

## make report suite=SUITE n=N
## displays summarizing statistics of the last N runs for suite SUITE
n=5
report:
	@echo "       TotalTime   #Parses      Parser     Time/sent Time/word      Edges    Mbytes"
	@if [ -f $(suite)/times ]; then\
         grep '^%XX' $(suite)/times | tail -n $(n); fi
	@echo " TREES   WORST   FIRST    BEST"
	@if [ -f $(suite)/bests ]; then\
          echo "----- recent:";\
          paste <(grep 'readings/s' $(suite)/bests      | tail -n $(n) | cut -d' ' -f 1)\
                <(grep 'WORST: ca-score' $(suite)/bests | tail -n $(n) | cut -d' ' -f 3)\
                <(grep 'FIRST: ca-score' $(suite)/bests | tail -n $(n) | cut -d' ' -f 3)\
                <(grep 'BEST: ca-score' $(suite)/bests  | tail -n $(n) | cut -d' ' -f 3);\
        fi
	@$(MAKE) -s reportcurrentbest
	@if [ -f $(suite)/scores ]; then\
          echo "----- recent:";\
          grep ca-score $(suite)/scores | tail -n $(n); fi

reportcurrentbest:
	@if [ -f $(suite)/best ]; then\
        trees=`tail $(suite)/best | grep 'readings/sentence'|awk '{ print $$1}'`;\
        best=`tail $(suite)/best | grep '^BEST: ca-score'|awk '{ print $$3}'`;\
        first=`tail $(suite)/best | grep '^FIRST: ca-score'|awk '{ print $$3}'`;\
        worst=`tail $(suite)/best | grep '^WORST: ca-score'|awk '{ print $$3}'`;\
        echo "----- expected:";\
        echo "$$trees	$$worst	$$first	$$best	$(suite)";\
        fi

tests: j_suite.testN i_suite.testN h_suite.testN g_suite.testN leuven_yellow_pages.testN lot_test_suite1.testN \
       cgn_exs.testN qa.testN extra.testN cdb.testN wpspel.testN LassySmall.testN lassy-doc.testN\
       novelsample_corrected.testN eans.testN Titaantjes.testN ovistrain.testN

shs: i_suite.testN h_suite.testN g_suite.testN j_suite.testN

shs_rest: leuven_yellow_pages.testN lot_test_suite1.testN \
       cgn_exs.testN qa.testN extra.testN lassy-doc.testN novelsample_corrected.testN eans.testN \
       wpspel.testN Titaantjes.testN

## all but cdb LassySmall
shorts: j_suite.testN i_suite.testN h_suite.testN g_suite.testN leuven_yellow_pages.testN lot_test_suite1.testN \
       cgn_exs.testN qa.testN extra.testN wpspel.testN lassy-doc.testN\
       novelsample_corrected.testN eans.testN Titaantjes.testN ovistrain.testN


longs: cdb lassy

lassy=lassysmall_part00001 lassysmall_part00002 lassysmall_part00003 lassysmall_part00004 lassysmall_part00005 lassysmall_part00006 lassysmall_part00007 lassysmall_part00008 lassysmall_part00009 lassysmall_part00010 lassysmall_part00011 lassysmall_part00012 lassysmall_part00013 lassysmall_part00014 lassysmall_part00015 lassysmall_part00016 lassysmall_part00017 lassysmall_part00018 lassysmall_part00019 lassysmall_part00020 lassysmall_part00021 lassysmall_part00022 lassysmall_part00023 lassysmall_part00024 lassysmall_part00025

lassy:$(lassy:%=%.testN)

cdb=cdb_part00001 cdb_part00002 cdb_part00003 cdb_part00004 cdb_part00005 cdb_part00006 cdb_part00007 cdb_part00008 cdb_part00009 cdb_part00010 

cdb:$(cdb:%=%.testN)

diffs: errors $(cdb:%=%.diff) $(lassy:%=%.diff)

%.diff: %.errors
	@-diff <(make $*.err) $*.errors

errors:l_errors c_errors

l_errors: $(lassy:%=%.l_errors)
c_errors: $(cdb:%=%.c_errors) 

%.l_errors:K/%.keys LassySmall.errors
	@python3 K/errors.py LassySmall.errors < $< >$*.errors

%.c_errors:K/%.keys cdb.errors
	@python3 K/errors.py cdb.errors < $< >$*.errors

K/%.keys: ../Suites/%.named_sents
	@awk -F\| '{ print $$1 }' $< >$@

%.err: %.errors
	@for file in $*/job*/log;\
         do if [ -f $$file ]; then $(ALPINO_HOME)/compare_errors.py <(grep '^BEST SCORE' $$file | awk '{ print $$3, $$11 }') $*.errors;\
	    else cat $*.errors;\
	    fi; \
         done

SCORES=$(sort $(wildcard */*/bests))
bf:
ifeq ($(strip $(SCORES)),)
	@echo "bf: nothing to do"
else
	@echo "        BEST-CA          #PARSES        SUITE"
	@echo "      NEW     OLD      NEW      OLD"
	@$(MAKE) -s $(SCORES:%bests=%bf) |\
            awk '{ G=" ";\
                   if ($$1>$$2) {G="!"};\
                   if ($$2>$$1) {G="?"};\
                   printf "%s %7.3f %7.3f %8.2f %8.2f %s %s\n",\
                               G,$$1,$$2,$$3,$$4,$$5,$$6;\
                   N=N+1; A=A+$$1; B=B+$$2; C=C+$$3; D=D+$$4 }\
                END {printf "\n  %7.3f %7.3f %8.2f %8.2f mean\n",\
                       A/N,B/N,C/N,D/N}'
endif

%/bf:%/bests
	@echo `grep 'BEST: ca-score' $< | awk '{ print $$3 }' `"	"`if [ -f $(dir $(dir $*))/best ]; then grep 'BEST: ca-score' $(dir $(dir $*))/best | tail -n 2 | head -n 1 | awk '{ print $$3 }'; fi`"	"`grep readings/sentence $< | awk '{ print $$1 }'`"	"`if [ -f $(dir $(dir $*))/best ]; then grep 'readings/sentence' $(dir $(dir $*))/best | tail -n 2 |head -n 1 | awk '{ print $$1 }'; fi`"	"$(dir $(dir $*))"	"`grep extra= $(dir $(dir $*))/times |tail -n 1|sed -e 's/extra=//' | tr ' ' ',' `

ORDERED=-rt

j:
	for part in $(cdb); do make tjob command=$$part.testN; done
l:
	for part in $(lassy); do make tjob command=$$part.testN; done

tjob:
	(  \
   echo "#!/bin/sh" ;\
   echo "#SBATCH --nodes=1" ;\
   echo "#SBATCH --ntasks=1" ;\
   echo "#SBATCH --time=24:00:00" ;\
   echo "#SBATCH --mem=20G";\
   echo "module load Python/3.10.4-GCCcore-11.3.0";\
   echo "module load lxml/4.9.1-GCCcore-11.3.0";\
   echo "module load Boost/1.79.0-GCC-11.3.0";\
   echo "module load Tk/8.6.12-GCCcore-11.3.0";\
   echo "export PROLOGMAXSIZE=15000M";\
   echo "hostname -f " ;\
   echo "echo $(command) " ;\
   echo "cd `pwd`";\
   echo "$(MAKE) $(command)";\
       ) | sbatch --job-name=$(command)
