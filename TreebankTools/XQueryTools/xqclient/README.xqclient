 -*- text -*-
GJK Mon Dec  4 09:46:35 2006

Using XQClient
==============

XQClient is an XQuery processor that gets its data from an Alpino
Treebank server.  It uses the Saxon internals forXQuery processing.

To use XQClient we first need to have a treebank server running.

Starting a treebank server
--------------------------

The treebank-server program resides under Alpino/Treebank.

Let's remind us what the defaults are:
----------------------------------------------------------------------
$ treebank-server -h
usage: treebank-server [options]

options:
  -h, --help            show this help message and exit
  -pPORT, --port=PORT   the port to listen on (default: 44444)
  -cCORPUSDIR, --corpus-root=CORPUSDIR
                        file location (default:
                        ~vannoord/z/Alpino/Treebank)
  -l, --localhost       use localhost (loopback) interface
  -v, --verbose         use (more) verbose logging
----------------------------------------------------------------------

We want to run the treebank server on our localhost interface.
The defaults are ok for us:

----------------------------------------------------------------------
$ treebank-server -l &
----------------------------------------------------------------------

The treebank server will accept only file ids relative to its corpus
directory.  They may be specified absolutely though.

Examples:

    cdb/1.xml                                      # This works
    /users1/vannoord/z/Alpino/Treebank/cdb/1.xml   # This works too
    /users2/geertk/Alpino/Treebank/cdb/1.xml       # Does not work

The last one does not work, even though it's an existing file in the
filesystem.  It's outside of the treebank servers corpus directory and
the treebank server will refuse to read it.


Running XQclient
----------------

Let's look at the usage information:

----------------------------------------------------------------------
$ xqclient   
xqclient: Error: no query file given!
Usage: xqclient [options] <queryfile|{query}> [filename(s)]

Options: 
  -h, --host hostname   host name from treebankserver (default
  localhost)
  -p, --port port       port number from treebankserver (default
  44444)
  -s, --stdin           read file ids from stdin
  -t, --text            output only text nodes
  -l, --latin1          set output encoding to iso-8859-1
  --omit-xml-decl       omit the xml declaration
----------------------------------------------------------------------

Just like Saxon, XQclient will interpret query arguments starting with
'{' and ending with '}' as an inline query.  We'll be using this form
in the following examples.

Specify file ids on the command line:
----------------------------------------------------------------------
$ xqclient -t '{fn:concat(//sentence[1],"&#xa;")}' cdb/1.xml cdb/2.xml
----------------------------------------------------------------------

Here we set the XQuery output mode to "text".  Only text nodes will
be output.  We could have used `-l' or `--latin1' to force output to 
iso-8859-1 encoding.  The default XQuery output encoding is UTF-8.

XQClient can also read the file ids from it's standard input:
----------------------------------------------------------------------
$ VT=/users1/vannoord/z/Alpino/Treebank
$ dtlist -r $VT | xqclient -s -t '{fn:concat(//sentence[1],"&#xa;")}' 
----------------------------------------------------------------------

Here we use dtlist recursively to get a full file listing of the
corpus directory.  XQClient will read these file ids and process them.

Of course we don't need to use inline queries:
----------------------------------------------------------------------
$ dtlist -r Machine/clef | xqclient -s my_fancy_query.xq
----------------------------------------------------------------------


Portability Note
----------------

The Java Virtual Machine ignores the SIGPIPE signal, nor does it seem
to detect when the standard output is suddenly closed .  This makes
that things like
----------------------------------------------------------------------
$ dtlist -r Machine/clef | xqclient -s my_fancy_query.xq | head 10
----------------------------------------------------------------------
continue until all files are processed.  The program does *not* stop
after having output 10 lines!

We use the undocumented sun.misc.Signal and sun.misc.SignalHandler
classes to trap SIGPIPE.  This will probably break on non-Sun
JVMs, and might even break on future releases of the Sun JVM.  See
http://java.sun.com/products/jdk/faq/faq-sun-packages.html for more
details on this.

For the moment this seems the best solution though.

