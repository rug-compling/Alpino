#!/usr/bin/env python

# $Id: dtsearch,v 1.11 2006-12-06 10:29:23 geertk Exp $

import sys
import os
from optparse import OptionParser
import types
import re
import string

# pad naar de lokale modules zetten
ALPINO_HOME = os.getenv("ALPINO_HOME")
if not ALPINO_HOME:
    sys.stderr.write("dtsearch: Error: please set your ALPINO_HOME variable\n")
    sys.exit(1)

sys.path.insert(0, os.path.join(ALPINO_HOME, "TreebankTools/python-lib"))

from actlib import process_arguments, xslt_quote_string, msg, xmlmatch_from_mem
import libxml2, libxslt

#----------------------------------------------------------------------

stylesheetdir = os.path.join(ALPINO_HOME, 'TreebankTools', 'stylesheets')

constituent_sheet = os.path.join(stylesheetdir, 'print-matched-constituents.xsl')
constituent_root_sheet = os.path.join(stylesheetdir, 'print-matched-constituents.xsl')

#----------------------------------------------------------------------


# N.B. had ik xmlmatch_from_mem gewoon gewoon met globale variabelen kunnen laten werken?
#      zitten er teveel functies in actlib?
#      Het lijkt of ik alleen `xslt_quote_string' en `process_arguments' nodig heb
def workhorse(xmldata, filename, query=""):
    """Laat QUERY los op XMLDATA zoals bij xmlmatch

    FILENAME is de filenaam die we voor de uitvoer gebruiken.

    Beschrijving keyword argumenten:

      QUERY       - een XPath (string-)expressie met de query

    In deze functie gaan we op xml-niveau ingrijpen om zoekresultaten
    te produceren.

    Alles wat met stylesheets gaat doen we met `xmlmatch_from_mem'.
    """

    # we doen niet ingewikkeld en gebruiken gewoon globale variabelen

    global options, counthash, dtview_fp, shellquotedquery

    query = options.query

    doc = libxml2.parseDoc(xmldata)

    ctxt = doc.xpathNewContext()
    xpathres = ctxt.xpathEval(query)

    if xpathres:
        if options.dtview:
            # we openen de pipe pas bij de eerste match
            if not dtview_fp:
                dtview_fp = os.popen("dtview -query %s -s" % (shellquotedquery), "w", 1)

            dtview_fp.write(filename + "\n")
            
        elif options.bracketed_sentence:
            print_bracketed_sentence(doc, xpathres, filename)

        elif options.statistics or options.rootlabels:
            verhoog_tellertjes(xpathres, counthash)

    ctxt.xpathFreeContext()
    doc.freeDoc()



def shellquote(str):
    """quote the string to make it safe for the shell"""
    # De string moet tussen enkele quotes, tussen dubbele quotes wordt
    # de string geinterpoleerd (door de shell)

    if str == "":
        return "''"

    elif (re.search(r'[^\w._\-/]', str)):
          str = str.replace("'", r"'\''")
          str = "'" + str + "'"
          str = re.sub(r"^''", "", str)
          str = re.sub(r"''$", "", str)

    return str


def verhoog_tellertjes(xpathres, counthash):
    """Verhoog de tellertjes voor de statistiek-uitvoer

    COUNTHASH is een hash van hashes (een dictionary van dictionaries)
    met voor ieder attribuut dat we willen bijhouden een hash.
    """

    if type(xpathres) == types.ListType:
        for node in xpathres:

            if node.name != 'node':
                break

            for attr in counthash.keys():
                hash = counthash[attr]
                value = node.prop(attr)
                if value != None:
                    try:
                        hash[value] += 1
                    except KeyError:
                        hash[value] = 1


def print_statistics(counthash):
    """Print de waarden van counthash"""

    for attr in counthash.keys():
        hash = counthash[attr]

        # keys sorteren op volgorde van value
        key_list = [ (hash[key], key) for key in hash.keys() ]
        key_list.sort()
        key_list = [x[1] for x in key_list]
        key_list.reverse()

        print attr + ":"

        for key in key_list:
            print "%8d %s" % (hash[key], key)
                                         ###.decode('utf8').encode('latin1')


def print_bracketed_sentence(doc, xpathres, filename):
    """Print a bracketed sentence based on XPATHRES and DOC
    Output is hard-coded to iso-8859-1, like the stylesheet version."""

    # haal de zin op
    ctxt = doc.xpathNewContext()
    sentence = ctxt.xpathEval('/*/sentence')[0]
    words = sentence.content.split()

    if type(xpathres) == types.ListType:
        for node in xpathres:

            if node.name != 'node':
                break

            begin = node.prop('begin')
            end   = node.prop('end')

            if begin:
                begin = int(begin)
                words[begin] = "[" + words[begin]
            if end:
                words[int(end) - 1] += ']'
        
    ctxt.xpathFreeContext()
    print filename + "\t" + string.join(words, " ")
                                                   ##.decode('utf8').encode('latin1')


def main():

    global options, counthash, dtview_fp, shellquotedquery

    parser = OptionParser("usage: %prog [options] <[-q] QUERY> <files, directories, ...>")

    parser.add_option("-q", "--query", "-e", "--expr", dest="query",
                      help="XPath expression to search for")

    parser.add_option("--statistics", "-l", action="store_true", dest="statistics",
                      help="print stats for values of rel,cat,pos labels in matching nodes")

    parser.add_option("--root-labels", "-r", action="store_true", dest="rootlabels",
                      help="print stats for values of root label in matching nodes")

    parser.add_option("--show-sentence", "-s", action="store_true", dest="bracketed_sentence",
                      help="show sentences with matching phrases")

    parser.add_option("--matching-constituents", "-c", action="store_true", dest="constituents",
                      help="show matching constituents only, not the full sentence.")

    parser.add_option("--dtview", "-d", "-v", action="store_true", dest="dtview",
                      help="show matches using dtview.")

    parser.add_option("--stdin",  action="store_true", dest="stdin",
                      help="read file arguments from stdin.  "
                      "Any non-option arguments on the commandline will be ignored.")

    (options, args) = parser.parse_args()


    # the query is passed using -q, --query., or it's the first non-option argument
    if not options.query:
        if not args:
            msg("Error: no query specified")
            parser.print_help(sys.stderr)
            sys.exit(1)

        options.query = args.pop(0)


    if not (args or options.stdin):
        msg("Error: No arguments to process.  Exiting....")
        sys.exit(1)


    # A quick hack to use queries with accented characters
###    options.query = options.query.decode('latin1').encode('utf8')


    stylesheet = None
    parsedsheet = None

    if options.dtview:
        shellquotedquery = shellquote(options.query)
        dtview_fp = None
        process_arguments(args, workhorse, options.stdin, 1, True)
    elif options.rootlabels:
        counthash = {'root': {}, 'lemma': {}, 'word':{} }
        process_arguments(args, workhorse, options.stdin, 1, True)
    elif options.statistics:
        counthash = {'rel': {}, 'cat': {}, 'pos':{}, 'postag':{}}
        process_arguments(args, workhorse, options.stdin, 1, True)
    elif options.bracketed_sentence:
        process_arguments(args, workhorse, options.stdin, 1, True)
    else:                               # de volgende opties moeten allemaal met een stylesheet
        

        params = {}
        params["expr"] = xslt_quote_string(options.query)

        if options.constituents:
            stylesheet = constituent_sheet

        if stylesheet:
            # compileer het stylesheet e.d.
            styledoc = libxml2.parseFile(stylesheet)
            parsedsheet = libxslt.parseStylesheetDoc(styledoc)


        # wanneer het stylesheet niet gezet is krijgen we alleen files te zien
        process_arguments(args,
                          xmlmatch_from_mem,
                          options.stdin,
                          1,            # we willen altijd recursief aan de gang
                          True,
                          params=params,
                          query=options.query,
                          stylesheet=parsedsheet)

    # cleanup

    if options.statistics or options.rootlabels:
        print_statistics(counthash)

    if options.dtview:

        if dtview_fp:
            # deze code wordt nooit bereikt wanneer dtview
            # voortijdig stopt met lezen! (SIGPIPE)
            dtview_fp.close()
        else:
            msg("no matches found!")

    if parsedsheet:
        parsedsheet.freeStylesheet()    # pakt styledoc ook gelijk


#----------------------------------------------------------------------


# ENTRY POINT

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
