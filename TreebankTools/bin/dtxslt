#!/usr/bin/env python3

import os
import sys

from argparse import ArgumentParser

ALPINO_HOME = os.getenv("ALPINO_HOME")
if not ALPINO_HOME:
    sys.stderr.write("act: Error: please set your ALPINO_HOME variable\n")
    sys.exit(1)

sys.path.insert(0, os.path.join(ALPINO_HOME, "TreebankTools/python-lib"))

import actlib as ac

if __name__ == "__main__":

    parser = ArgumentParser(os.path.basename(sys.argv[0]))

    parser.add_argument("name", type=str, nargs="*", help="dzcorpus or directory")

    parser.add_argument("--param", dest="param", action="append",
        help="Parameter for stylesheet")

    parser.add_argument("-r", "--recursive", action="store_true", dest="recursive",
        help="Recursively create or update archives")

    parser.add_argument("-q", "--query", "-e", "--expr", dest="query",
        help="XPath expression to search for")

    parser.add_argument("--stdin", action="store_true", dest="stdin",
        help="Read file arguments from stdin.  Any non-option arguments on the commandline will be ignored.")

    parser.add_argument("--stringparam", dest="stringParam", action="append",
        help="String-parameter for stylesheet")

    parser.add_argument("-s", "--stylesheet", dest="stylesheet",
                        required=True,
                        help="stylesheet to use for output")

    options = parser.parse_args()
    args = options.name

    if not (args or options.stdin):
        parser.print_help(sys.stderr)
        sys.exit(1)

    # stylesheet alvast parsen indien nodig
    stylesheet = None
    styledoc = None

    params = {}

    # A quick hack to use queries with accented characters (latin1 input assumed)
    if options.query:
    #    options.query = options.query.decode('latin1').encode('utf8')
        params["expr"] = ac.xslt_quote_string(options.query)

    if options.stringParam:
        for param in options.stringParam:
            if param.find('=') == -1:
                raise RuntimeError
            (p, v) = param.split('=', 1)
            v = ac.xslt_quote_string(v)
            params[p] = v

    if options.param:
        for param in options.param:
            if param.find('=') == -1:
                raise RuntimeError
            (p, v) = param.split('=', 1)
            params[p] = v

    # Compile the stylesheet
    styledoc = ac.etree.parse(options.stylesheet)
    stylesheet = ac.etree.XSLT(styledoc)

    if options.stdin:
        # args = get_arglist_from_stdin()
        # wrong, will be read in by process_arguments()
        args = []

    if options.query:
        ac.process_arguments(args, ac.xmlmatch_from_mem, options.stdin,
            options.recursive, True, params=params,
            query=options.query, stylesheet=stylesheet)
    else:
        ac.process_arguments(args, ac.xmlmatch_from_mem, options.stdin,
            options.recursive, True, params=params,
            stylesheet=stylesheet)
