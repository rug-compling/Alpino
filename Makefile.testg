###           -*-Mode: makefile;-*-

job := job${shell echo $$$$}

default:
	@echo "make test suite=SUITE"
	@echo "will run Alpino on the specified suite"
	@echo
	@echo
	@echo "Each target typically creates its own working directory"
	@echo "for temporary stuff; in addition it appends summarizing"
	@echo "statistics to some of the files in a directory dedicated"
	@echo "to that suite."

ll:
	@for dir in $(suites); do $(MAKE) --no-print-directory compare suite=$$dir; $(MAKE) --no-print-directory comparescore suite=$$dir; done

l:
	@echo all jobs:
	@$(MAKE) --no-print-directory ll | grep sentences
	@echo finished jobs:
	@$(MAKE) --no-print-directory cf
	@$(MAKE) --no-print-directory diffs

include $(ALPINO_HOME)/Makefile.errormining

suitepath=../Suites
suite=g_suite
dir=./
part=
debug=1

## defaults for test1 target
default_test_options=debug=$(debug) use_fluency_model=on user_max=600000
cdb_test_options= -flag fluency_feature_weights ../Generation/fluency/maxent_feature_weights_c
extra_test_options= -flag fluency_feature_weights ../Generation/fluency/maxent_feature_weights_x
PPH_test_options= -flag fluency_feature_weights ../Generation/fluency/maxent_feature_weights_p
PPI_test_options= -flag fluency_feature_weights ../Generation/fluency/maxent_feature_weights_i
dpc-ind_test_options= -flag fluency_feature_weights ../Generation/fluency/maxent_feature_weights_d -flag treebank $(ALPINO_HOME)/Treebank/dpc


test:
	@mkdir -p $(suite)$(part)/$(job)
	@echo "extra=$(extra)" >> $(suite)$(part)/times
	@-$(MAKE) trees dir=$(suite)$(part)/$(job) 
	@$(MAKE) test1rest job=$(job) suite=$(suite) part="$(part)"
	@cat $(suite)$(part)/$(job)/times >> $(suite)$(part)/times

testgss: g1 g2 g3 g4 g5

g1:
	$(MAKE) test suite=gen_g_suite
g2:
	$(MAKE) test suite=g_suite
g3:
	$(MAKE) test suite=h_suite
g4:
	$(MAKE) test suite=i_suite
g5:
	$(MAKE) test suite=lassy

testgsl: g6 g7 g8 g9 g10 g11

g6:
	$(MAKE) test suite=extra
g7:
	$(MAKE) test suite=qa
g8:
	$(MAKE) test suite=cdb
g9:
	$(MAKE) test suite=dpc-ind
g10:
	$(MAKE) test suite=PPH
g11:
	$(MAKE) test suite=PPI

tests:
	$(MAKE) testgsl testgss

test1rest:
	-grep '^T#' $(suite)$(part)/$(job)/log\
                                 > $(suite)$(part)/$(job)/time
	-grep '^G#' $(suite)$(part)/$(job)/log\
         | awk -F\| '{ print $$1, $$2, $$3 }'\
                                 > $(suite)$(part)/$(job)/sents
	-grep '^K#' $(suite)$(part)/$(job)/log\
                                 > $(suite)$(part)/$(job)/scores
	$(MAKE) score file=$(suite)$(part)/$(job)/scores\
                                 >> $(suite)$(part)/$(job)/times
	$(MAKE) report

trees:
	@echo > $(dir)/times
	hostname -f >>$(dir)/times
	@echo `date` >> $(dir)/times
	@echo `hostname` >> $(dir)/times
	@echo "extra=$(extra) $(PUNCT)" >> $(dir)/times
	$(ALPINO_HOME)/src/Alpino\
          -flag suite $(suitepath)/$(suite)\
          penalties=undefined\
          treex_corrections=off\
          $(default_test_options)\
          $($(suite)_test_options)\
          $(extra) -notk cmdint=off\
          batch_command=roundtrip\
                          2>$(dir)/log >> $(dir)/times

n=5
report:
	@if [ -f $(suite)$(part)/times ]; then\
         grep XX $(suite)$(part)/times | tail -n $(n); fi



upd_all:
	@for file in `echo $(shell ls $(ORDERED) */*/time 2>/dev/null)`; do \
        suite=`echo $$file | awk -F/ '{ print $$1 }'`;\
	echo "cp $$file $(prefix)$$suite/time";\
        done
	@for file in `echo $(shell ls $(ORDERED) */*/sents 2>/dev/null)`; do \
        suite=`echo $$file | awk -F/ '{ print $$1 }'`;\
	echo "cp $$file $(prefix)$$suite/sents";\
        done
	@for file in `echo $(shell ls $(ORDERED) */*/scores 2>/dev/null)`; do \
        suite=`echo $$file | awk -F/ '{ print $$1 }'`;\
	echo "cp $$file $(prefix)$$suite/scores";\
        done

rm_all:
	@for dir in */job*;\
         do\
             if    cmp -s $$dir/time $$dir/../time     ;\
             then echo "rm -rf $$dir";\
             fi;\
         done

ORDERED=-rt

pat=T
compare:
	@$(MAKE) --no-print-directory compare_field field=4 diff=1.25 txt="cputime" min=200 less="!!!" more="???" pat=T
	@$(MAKE) --no-print-directory compare_field field=6 diff=1    txt="edges"   min=-1  less="!!!" more="???" pat=T
	@$(MAKE) --no-print-directory compare_field field=3 diff=1    txt="results" min=-1  less="<<<" more=">>>" pat=T
	@if [ "$(score1)" != "" ]; then awk -F\| '/^T#/{ if ($$3 == 0) N++;}\
                  END { printf "%d items without result (%s)\n",N,"$(score1)" }' $(score1); fi

score2=$(prefix)$(suite)$(part)/scores
compare_score: comparescore
comparescore:
	@$(MAKE) compare_field field=3 diff=1 txt="GTM" min=-1 less="???" more="!!!"\
              pat=K score2=$(score2) prefix=score

filter=cat
## only first reading (1) or if no reading (0):
scorefilter=awk -F\| '{ if ($$2<2) print $$0}'

compare_field:
	@if [ "$(score1)" != "" ] && [ "$(score2)" != "" ]; then\
        grep '^$(pat)#' $(score1)\
         | sed -e 's/^$(pat)#//'\
         | $($(prefix)filter)\
         | awk -F\| '{ print $$ $(field), $$1 }' >$(L1) ;\
        grep '^$(pat)#' $(score2)\
         | sed -e 's/^$(pat)#//'\
         | $($(prefix)filter)\
         | awk -F\| '{ print $$ $(field), $$1 }' >$(L2) ;\
        echo "NEW	PREV		ITEM";\
        paste $(L1) $(L2) |\
          awk 'BEGIN {I=1}                                                  \
                     { if (NF==4 && $$2 == $$4) {                           \
                          if ($$1!=$$3) {                                   \
                              if ($$1>$(diff)*$$3 && $$1>$(min))            \
                                 { F="$(more)" };                           \
                              if ($$3>$(diff)*$$1 && $$3>$(min))            \
                                 { F="$(less)" };                           \
                              if(F) { print $$1 "\t" $$3 "\t\t" $$2 "\t" F "	$(suite)"}\
                          };                                                \
                          F="";                                             \
                          I=I+1;                                            \
                          N=N+$$1;                                          \
                          M=M+$$3 }                                         \
                     }                                                      \
               END {print "-------------- $(txt) -------------------";      \
                    if (I>1) {print N/(I-1) "\t" M/(I-1) "\t\t" I-1 " sentences\t$(score1)\t $(txt)" }; \
                   }' ; fi
	@rm -f $(L1) $(L2)

suites=$(dir $(wildcard */scores))


jobsuites=$(sort $(dir $(wildcard */job*)))

cs:
	for j in $(jobsuites); do for l in $$j/job*/log; do echo $$j $$l; $(MAKE) -s comparescore score2=$$j/scores suite=$$j score1=$$l; done; done

echo:
	echo $(jobsuites)

score1=${shell ls -t $(suite)$(part)/job*/log 2>/dev/null |head -n 1}

sss:
	echo $(suites)

cf00:
	@$(MAKE) --no-print-directory score
	@$(MAKE) --no-print-directory score file=$(suite)/scores

cf:
	@for suite in $(suites) ; do $(MAKE) --no-print-directory cf0 suite=$$suite; done

cf0:
	@if [ -r $(suite)/job*/scores ]; then for file in $(suite)/job*/scores; do $(MAKE) --no-print-directory cf00 file=$$file suite=$(suite); done ;fi


scores:
	@for file in */job*/log; do $(MAKE) -s score file=$$file; done

score:
	@if [ -r $(file) ]; then awk -F\| '/^K#/ { if ($$2<2) { N=N+1; R=R+$$3} } END {printf "%s mean GTM: %.3f\n","$(file)",R/N}' $(file) ; fi



sents1=${shell ls -t $(suite)$(part)/job*/sents 2>/dev/null|head -n 1}
sents2=$(prefix)$(suite)$(part)/sents

diffs:
	@for suite in $(suites); do $(MAKE) --no-print-directory diff suite=$$suite; done

diff:
	@-if [ "$(sents1)" != "" ]; then echo compare new sentences with old for $(suite); diff $(sents1) $(sents2); fi


difft:
	@grep '^G#' ${shell ls -t $(suite)$(part)/job*/log 2>/dev/null|head -n 1} |\
             awk -F\| '{ print $$1,$$2,$$3 }' > \
                      ${dir ${shell ls -t $(suite)$(part)/job*/log 2>/dev/null|head -n 1}}/sents
	$(MAKE) diff


cpu1=${shell ls -t $(suite)/*/log|head -n 1}
cpu2=$(prefix)$(suite)/time

L1 := $(shell mktemp)
L2 := $(shell mktemp)

compare_cpu:
	@echo "NEW	PREV		ITEM"
	@grep '^T#' $(cpu1) | tr '\|' '\t' > $(L1)
	@grep '^T#' $(cpu2) | tr '\|' '\t' > $(L2)
	@paste $(L1) $(L2)  |\
          awk 'BEGIN {I=1}                                                  \
                     { if (NF==12) {                                         \
                          if ($$4>1.2*$$10 && $$4>500)                      \
                             { F="???" };                                   \
                          if ($$10>1.2*$$4 && $$10>500)                      \
                             { F="!!!" };                                   \
                          if(F) { print $$4 "\t" $$10 "\t\t" $$1 "\t" F }    \
                          F="";                                             \
                          I=I+1;                                            \
                          N=N+$$4;                                          \
                          M=M+$$10 }                                         \
                     }                                                      \
               END {print "------------";                                   \
                    print "AVERAGES after " I-1 " sentences";               \
                    print "AV " N/(I-1) "\t" M/(I-1) "\t\t\t" (N/(I-1))/(M/(I-1)) "\t\t$(cpu1)"; \
                    print "================================================";           \
                   }' 
	@rm -f $(L1) $(L2)

cg:
	@for file in `ls -tr */job*/log*`;\
        do echo $$file;\
           $(MAKE) -s compare_cpu cpu1=$$file cpu2=`dirname $$file`/../time;\
        done | grep '^AV '

overview:
	@for file in */scores; do $(MAKE) -s score file=$$file; done
