#!/usr/bin/perl -w
use Getopt::Std;
getopts('fn:');
$opt_n ||= 1000000;
$opt_f ||= 0;

# to make it easy to duplicate results...
srand(13);

$prevkey=-1;
$numberofparses=0;
@output=();
while(<>) {
  if ($. % 25000==0) 
    { print STDERR "read $. lines\n";}
  next if /^[%\#]/;
  next if !/\|/;
  chomp;

  if ($opt_f) {
      (undef,$key) = split/\#/;
  } else {
      ($key,undef) = split/\#/;
#      print STDERR $key;
  }

  if ($key eq $prevkey) {
      push @output, "$_\n";
      $numberofparses++;
  }
  else { #new key
    # print stuff of previous key first..
    if ($numberofparses) {
	if ($numberofparses > $opt_n) {
            fisher_yates_shuffle( \@output );
            print join('',@output[0..$opt_n-1]);
        } else {
            print join('',@output);
        }
    }
    @output = ("$_\n");
    $prevkey = $key;
    $numberofparses=1;
  }
}

# don't forget last sentence
if ($numberofparses) {
    if ($numberofparses > $opt_n) {
        fisher_yates_shuffle( \@output );
	print join('',@output[0..$opt_n-1]);
    } else {
	print join('',@output);
    }
}

# fisher_yates_shuffle( \@array ) : generate a random permutation
# of @array in place
sub fisher_yates_shuffle {
    my $array = shift;
    my $i;
    for ($i = @$array; --$i; ) {
        my $j = int rand ($i+1);
        next if $i == $j;
        @$array[$i,$j] = @$array[$j,$i];
    }
}

