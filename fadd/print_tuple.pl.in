#!/usr/bin/perl
eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
    if $running_under_some_shell;
			# this emulates #! processing on NIH machines.
			# (remove #! line above if indigestible)

eval '$'.$1.'$2;' while $ARGV[0] =~ /^([A-Za-z_0-9]+=)(.*)/ && shift;
			# 'process any FOO=bar switches

# This script prints the contents of a tuple.
#
# Synopsis:
# print_tuple tuple dict...
#
# where...

# Set the path to fsa utilities here
$fsa="@@S_FSA_PATH@@";

if ($fsa) { 
    $fsahash="$fsa/fsa_hash";
    $fsabuild="$fsa/fsa_build";
} else {
    $fsahash="fsa_hash";
    $fsabuild="fsa_build";
}

#for ($i = 0; $ARGV[$i]; $i++) { printf "[%d] %s\n", $i, $ARGV[$i]; }

# Set file names
$tuple_name = $ARGV[0];
if ($ARGV[0] eq "") {
    synopsis();
    exit;
}
$fnames[0]="";
shift;
while ($ARGV[0] ne "") {
    $fnames[$fns++] = shift;
    printf stderr "Setting column name for %d to %s\n", $fns - 1,
    $fnames[$fns - 1];
}

# Read the signature
open(DATA1, "<$tuple_name") or die "Cannot read from $tuple_name $!\n";
read DATA1, $buf, 8;		# read signature
if (substr($buf, 0, 5) ne "\\TUPL") {
    printf stderr "This is not a tuple file\n";
    exit;
}
$version = ord(substr($buf, 5, 1));
$words = ord(substr($buf, 6, 1));
$numbers = ord(substr($buf, 7, 1));
$total = $words + $numbers;
read DATA1, $ss, $total;	# read sizes vector
$sign_vect_size = (($numbers + 7) >> 3);
read DATA1, $sign_vect, $sign_vect_size; # read sign vector
$string_size = 0;
for ($i = 0; $i < $words; $i++) {
    $string_size += ord(substr($ss,$i,1));
}
if ($version == 0 && $words == 1) {
    $tuple_size = 0;
} else {
    $tuple_size = $string_size;
}
for ($i = $words; $i < $total; $i++) {
    $tuple_size += ord(substr($ss,$i,1));
}
printf "Tuple version $version\n%d words, %d numbers in a tuple\n", $words,
    $numbers;
printf "Sizes are:\n";
for ($i = 0; $i < $total; $i++) {
    printf "[%d] %d\n", $i, ord(substr($ss,$i,1));
}
printf "Tuple size is $tuple_size\n";
printf "Sign vector is:\n";
$j = 0;
for ($i = $words; $i < $total; $i++) {
    printf "[%d] %s\n", $j,
    ((ord(substr($sign_vect, $j >> 3, 1)) >> 3) &
     (1 << (j & 3))) ? "negative" : "positive";
    $j++;
}
# Read and print the tuples
if ($version == 0) {
    $tpl_nr = 0;
    while (read DATA1, $buf, $tuple_size) {
	if ($words == 1) {
	    # Tuple number is the word number
	    $fn = $fnames[0];
	    open(DATA2, "| $fsahash -W -d $fn > tmp")
		or die "Cannot send data to fsa_hash";
	    printf DATA2 "%d\n", $tuple_nr;
	    close(DATA2);
	    open(DATA2, "< tmp");
	    $w = <DATA2>;
	    chomp $w;
	    close(DATA2);
	    printf "[%d (%s)] ", $tuple_nr, $w;
	    $one_col_off = 1;	# offset for tuples with one word column
	} else {
	    printf "[%d] ", $tuple_nr;
	    $one_col_off = 0;	# offset for tuples with more than one word
	}
	$m = 0;
	for ($j = $one_col_off; $j < $total; $j++) {
	    $n = 0;
	    for ($k = 0; $k < ord(substr($ss,$j,1)); $k++) {
		printf "%02x ", ord(substr($buf,$m, 1));
		$n = $n + (ord(substr($buf,$m++, 1)) << (8 * $k));
	    }
	    if ($j < $fns && $j < $words && $words != 1) {
		# Print the word close to its number
		$fn = $fnames[$j];
		open(DATA2, "| $fsahash -W -d $fn > tmp")
		    or die "Cannot send data to fsa_hash";
		printf DATA2 "%d\n", $n;
		close(DATA2);
		open(DATA2, "< tmp");
		$w = <DATA2>;
		chomp $w;
		close(DATA2);
		printf "(%s) ", $w;
	    }
	    else {
		printf "(%5d) ", $n;
	    }
	}
	printf "\n";
	$tuple_nr++;
    }
} elsif ($version == 3 || $version == 4) {
    if ($numbers > 0) {
	# Read mantissa sizes
	read DATA1, $buf, $numbers;
	printf "Mantissa sizes:\n";
	for ($i = 0; $i < $numbers; $i++) {
	    $mant_size[$i] = ord(substr($buf,$i,1));
	    printf "[%2d] %d", $i, $mant_size[$i];
	    if ($mant_size[$i] == 0) {
		printf " (integer)";
	    }
	    printf "\n";
	}
    }
    # Read address size
    read DATA1, $buf, 1;
    $address_size = ord(substr($buf,0,1));
    printf "Size of addresses is $address_size\n";

    # Read address of numbers (size of tree without numerical part)
    read DATA1, $buf, $address_size;
    $number_address = bytes2int($buf, $address_size);

    if ($words != 1) {
	printf "Numerical columns address is $number_address\n";
	# Read descriptions of columns
	for ($i = 0; $i < $words; $i++) {
	    read DATA1, $buf, $address_size;
	    $ci_address[$i] = bytes2int($buf, $address_size);
	    read DATA1, $buf, 1;
	    $ci_ptrsize[$i] = bytes2int($buf, 1);
	    printf "Column[%d] at %d, pointer size %d\n", $i, $ci_address[$i],
	    $ci_ptrsize[$i];
	    if ($i > 0) {
		$ci_items[$i - 1] = ($ci_address[$i] - $ci_address[$i - 1]) /
		    (ord(substr($ss, $i - 1, 1)) + $ci_ptrsize[$i - 1]);
	    }
	}
	$ci_items[$words - 1] = ($number_address - $ci_address[$words - 1]) /
	    ord(substr($ss, $words - 1, 1));
	for ($i = 0; $i < $words; $i++) {
	    --($ci_items[$i]);
	    printf "items[%d]=%d\n", $i, $ci_items[$i];
	}

	# Read the tree
	read DATA1, $tree, $number_address;
#	 printf stderr "Read tree:\n";
#	 for ($i = 0; $i < $number_address; $i++) {
#	     printf stderr " %d", ord(substr($tree, $i, 1));
#	 }
#	 printf stderr "\n";

	# Read the numerical part
	$num_part_size = (($number_address - $ci_address[$words - 1]) /
			  ord(substr($ss, $words-1, 1))) *
			      ($tuple_size - $string_size);
	read DATA1, $num_part, $num_part_size;
	printf "Numerical part size is $num_part_size\n";

	# Print the tree
	if (ord(substr($ss,0,1)) != 0) {
	    if ($version == 3) {
		print_tree($tree, $num_part, 0, $words - 1, 0,
			   ($words == 1 ? $number_address : $ci_address[1])
			   / (ord(substr($ss, 0, 1)) + $ci_ptrsize[0]),"","");
	    }
	    else {
		print_rtree($tree, $num_part, 0, $words - 1, 0,
			    ($words == 1 ? $number_address : $ci_address[1])
			    / (ord(substr($ss, 0, 1)) + $ci_ptrsize[0]),"","");
	    }
	}
	else {
	    # No hash key in the first column
	    print_nohash($tree, $num_part, $words - 1, $ci_items[0]);
	}
    }
    else {
	# Now number_address contains the number of tuples
	# There is no description of word columns
	# There is no tree
	# There is only the numerical part
	printf "There are $number_address tuples\n";
	$num_part_size = $number_address * ($tuple_size - $string_size);
	read DATA1, $num_part, $num_part_size;
#	 printf stderr "Beginning of numerical part: %s\n", bytes2str($num_part,
#								      10);
	for ($i = 0; $i < $number_address; $i++) {
	    if (defined $fnames[0] && $fnames[0] ne "") {
		$fn = $fnames[0];
		open(DATA2, "| $fsahash -W -d $fn > tmp")
		    or die "Cannot send data to fsa_hash";
		printf DATA2 "%d\n", $i;
		close(DATA2);
		open(DATA2, "< tmp");
		$w = <DATA2>;
		chomp $w;
		close(DATA2);
		printf "(%s) ", $w;
	    }
	    else {
		printf "%d", $key;
	    }
	    print_numerical_part($i);
	}
    }
} else {			# version is either 1 or 2
    read DATA1, $buf, 1;	# read address size
    $address_size = ord(substr($buf,0,1));
    printf "Size of addresses is $address_size\n";
    read DATA1, $buf, $address_size; # read address of numbers
    $number_address = bytes2int($buf, $address_size);
    printf "Numerical columns address is $number_address\n";
    printf "Description of columns:\n";
    $p_col = ($version == 1 ? $string_size : $words);
    $label_size = 1;
    for ($j = 0; $j < $p_col; $j++) {
	# Read and print the address of the column
	printf "[$j]: addr=";
	read DATA1, $buf, $address_size;
	$ci_address[$j] = bytes2int($buf, $address_size);
	printf "%d (%s), ", $ci_address[$j], bytes2str($buf, $address_size);
	# Read and print the offset of the column
	read DATA1, $buf, $address_size;
	$ci_origin[$j] = bytes2int($buf, $address_size);
	printf "-%d (%s), ", $ci_origin[$j], bytes2str($buf, $address_size);
	# Read and print the number of items in the column
	read DATA1, $buf, $address_size;
	$ci_size[$j] = bytes2int($buf, $address_size);
	printf "#items=%d (%s), ", $ci_size[$j], bytes2str($buf,
							   $address_size);
	# Read and print the hash number size for the column
	read DATA1, $buf, 1;
	$ci_hashsize[$j] = ord(substr($buf, 0, 1));
	printf "#=%d (%s), ", $ci_hashsize[$j], bytes2str($buf, 1);
	# Read and print the pointer size for the column
	read DATA1, $buf, 1;
	$ci_ptrsize[$j] = ord(substr($buf, 0, 1));
	printf "ptr=%d (%s), ", $ci_ptrsize[$j], bytes2str($buf, 1);
	# Calculate the hole column size (or rather width)
	if ($version == 2) {
	    $label_size = ord(substr($ss, $j, 1));
	}
	$ci_itemsize[$j] = $ci_hashsize[$j] + $ci_ptrsize[$j] + $label_size;
	printf "sum=%d\n", $ci_itemsize[$j];
    }
    printf "Perfect hashing automaton on word numbers as strings:\n";
    $label_size = 1;
    for ($column = 0; $column < $p_col; $column++) {
	printf "COLUMN %d\n", $column;
	if ($version == 2) {
	    $label_size = ord(substr($ss, $column, 1));
	}
	for ($it = 0; $it < $ci_size[$column]; $it++) {
	    read DATA1, $buf, $ci_itemsize[$column];
	    printf "[%d]: ", $it;
	    $empty = ncharstr("\xff", $ci_hashsize[$column]);
	    if (substr($buf, $label_size, $ci_hashsize[$column]) eq $empty) {
		printf "EMPTY\n";
	    }
	    else {
		if ($version == 1) {
		    printf "%d (%02x)";
		    ord(substr($buf, 0, 1)), ord(substr($buf, 0, 1)), # label
		}
		else {		# version == 2
		    $label_size = ord(substr($ss, $column, 1));
		    printf "%d (%s)",
		    bytes2int(substr($buf, 0, $label_size), $label_size),
		    bytes2str(substr($buf, 0, $label_size), $label_size);
		}
		printf ", #%d (%s)", 
		bytes2int(substr($buf, $label_size),
			  $ci_hashsize[$column]), # hash
		bytes2str(substr($buf, $label_size),
			  $ci_hashsize[$column]); # hash
		if ($ci_ptrsize[$column] > 0) {
		    printf ", ->%d (%s)\n",
		    bytes2int(substr($buf, $label_size
				     + $ci_hashsize[$column]),
			      $ci_ptrsize[$column]),
		    bytes2str(substr($buf, $label_size
				     + $ci_hashsize[$column]),
			      $ci_ptrsize[$column]);
		}
		else {
		    printf "\n";
		}
	    }
	}
    }
    printf "Numerical columns:\n";
    $tuple_nr = 0;
    while (read DATA1, $buf, $tuple_size - $string_size) {
	printf "[%d]", $tuple_nr++;
	$offset = 0;
	for ($column = 0; $column < $numbers; $column++) {
	    printf ", %d (%s)", bytes2int(substr($buf,$offset),
					 ord(substr($ss, $words + $column,
						    1))),
	      bytes2str(substr($buf,$offset),
			ord(substr($ss, $words + $column, 1)));
	    $offset += ord(substr($ss, $words + $column, 1));
	}
	printf "\n";
    }
}
	
    
close(DATA1);
printf "End of the tuple\n";


# Converts a string of bytes (internal representation) to an integer
# Parameters:
# str		- string of bytes to convert
# size		- length of the string.
# Returns:	the integer.
# Remarks:	Only positive numbers.
sub bytes2int {
    local ($str, $size) = @_;
    local ($res, $i);

    $res = 0;
    for ($i = 0; $i < $size; $i++) {
	$res = $res + (ord(substr($str, $i, 1)) << (8 * $i));
    }
    return $res;
}

# Converts a string of bytes (internal representation) to an integer
# Parameters:
# str		- string of bytes to convert
# size		- length of the string
# Returns:	the integer.
sub sbytes2int {
    local ($str, $size) = @_;
    local ($res, $i);

    $res = 0;
    if ((ord(substr($str, $size - 1, 1)) & 0x80) != 0) {
	for ($i = 0; $i < $size - 1; $i++) {
	    $res = $res + ((ord(substr($str, $i, 1)) ^ 0xff) << (8 * $i));
	}
	$res = $res + ((ord(substr($str, $i, 1)) ^ 0xff) << (8 * $i)) + 1;
	$res = - $res;
    }
    else {
	$res = bytes2int($str, $size);
    }
    return $res;
}


# Converts a string of bytes to a printable form
# Parameters:
# str		- the string to convert
# size		- length of the string
# Returns:	printable representation.
sub bytes2str {
    local ($str, $size) = @_;
    local ($res, $i);

    $res = sprintf "%02x", ord(substr($str, 0, 1));
    for ($i = 1; $i < $size; $i++) {
	$res = $res . " " . sprintf "%02x", ord(substr($str, $i, 1));
    }
    return $res;
}

# Returns a string of repetitions of a character
# char		- character to be repeted
# n		- number of repetitions
# Returns:	a string consisting of n chars.
sub ncharstr {
    local ($char, $n) = @_;
    local ($res);

    for ($res = ""; $n; $n--) {
	$res = $res . $char;
    }
    return $res;
}

# Prints a (sub)tree
# Parameters:
# tree		- current node of the tree
# num_part	- numerical part of tuples
# level		- current level
# num_level	- level where the numerical part begins
# l		- lower index in the current column
# r		- upper index in the current column
# prefix	- additional string to be printed in front of lower levels
# prp		- string to be printed in front of current level and higher
sub print_tree {
    my ($tree, $num_part, $level, $num_level, $l, $r, $prefix, $prp) = @_;
    my ($i, $item_size, $j, $key, $tp, $w, $ptr_indx, $next_indx, $fn);
#    printf stderr "print_tree called with level=$level, num_level=$num_level, l=$l, r=$r\n";
    $item_size = ord(substr($ss, $level, 1)) + $ci_ptrsize[$level];
#    printf stderr "item size is $item_size\n";
#    printf stderr "tree size is %d\n", length($tree);
    $tp = $ci_address[$level] + $l * $item_size;
    for ($i = $l; $i < $r; $i++) {
	printf "%s", $prp;
	if ($level > 0) {
	    printf "+- ";
	}
	# Print the data at this level (one line)
	$key = bytes2int(substr($tree, $tp, ord(substr($ss,$level,1))),
			 ord(substr($ss,$level,1)));
	$tp += ord(substr($ss,$level,1));
	# Print the word close to its number
	if (defined $fnames[$level] && $fnames[$level] ne "") {
	    $fn = $fnames[$level];
	    open(DATA2, "| $fsahash -W -d $fn > tmp")
		or die "Cannot send data to fsa_hash";
	    printf DATA2 "%d\n", $key;
	    close(DATA2);
	    open(DATA2, "< tmp");
	    $w = <DATA2>;
	    chomp $w;
	    close(DATA2);
	    printf "(%s) ", $w;
	}
	else {
	    printf "%d", $key;
	}
#	printf stderr "tp is $tp, level is $level\n";
	$ptr_indx = bytes2int(substr($tree, $tp, $ci_ptrsize[$level]),
			      $ci_ptrsize[$level]);
	$tp += $ci_ptrsize[$level];
	if ($level == $num_level) {
	    # Print numerical part
	    print_numerical_part($i);
	}
	else {
	    printf "\n";
	    # Print one level below
	    if ($i < $ci_items[$level] - 1) {
		$next_indx = bytes2int(substr($tree,
					      $tp +
					      ord(substr($ss, $level, 1)),
					      $ci_ptrsize[$level]),
				       $ci_ptrsize[$level]);
	    }
	    else {
		$next_indx = $ci_items[$level + 1];
	    }
	    print_tree($tree, $num_part, $level + 1, $num_level, $ptr_indx,
		       $next_indx, ($i < $r - 1 ? "| " : "  "),
		       $prp . $prefix);
	}
    }
}

# Prints a (sub)tree with relative indexes
# Parameters:
# tree		- current node of the tree
# num_part	- numerical part of tuples
# level		- current level
# num_level	- level where the numerical part begins
# l		- lower index in the current column
# r		- upper index in the current column
# prefix	- additional string to be printed in front of lower levels
# prp		- string to be printed in front of current level and higher
sub print_rtree {
    my ($tree, $num_part, $level, $num_level, $l, $r, $prefix, $prp,$fnm) = @_;
    my ($i, $item_size, $j, $key, $tp, $w, $ptr_indx, $next_indx, $fn);
#    printf stderr "print_rtree called with level=$level, num_level=$num_level, l=$l, r=$r\n";
    $item_size = ord(substr($ss, $level, 1)) + $ci_ptrsize[$level];
    $tp = $ci_address[$level] + $l * $item_size;
    for ($i = $l; $i < $r; $i++) {
	printf "%s", $prp;
	if ($level > 0) {
	    printf "+- ";
	}
	# Print the data at this level (one line)
	$key = bytes2int(substr($tree, $tp, ord(substr($ss,$level,1))),
			 ord(substr($ss,$level,1)));
	$tp += ord(substr($ss,$level,1));
	# Print the word close to its number
	if (defined $fnames[$level] && $fnames[$level] ne "") {
	    $fn = $fnames[$level];
	    open(DATA2, "| $fsahash -W -d $fn > tmp")
		or die "Cannot send data to fsa_hash";
	    printf DATA2 "%d\n", $key;
	    close(DATA2);
	    open(DATA2, "< tmp");
	    $w = <DATA2>;
	    chomp $w;
	    close(DATA2);
	    printf "(%s) ", $w;
	}
	else {
	    printf "%d", $key;
	}
	$ptr_indx = bytes2int(substr($tree, $tp, $ci_ptrsize[$level]),
			      $ci_ptrsize[$level]) + $i;
	$tp += $ci_ptrsize[$level];
	if ($level == $num_level) {
	    # Print numerical part
	    print_numerical_part($i);
	}
	else {
	    printf "\n";
	    # Print one level below
	    if ($i < $ci_items[$level] - 1) {
		$next_indx = bytes2int(substr($tree,
					      $tp +
					      ord(substr($ss, $level, 1)),
					      $ci_ptrsize[$level]),
				       $ci_ptrsize[$level]) + $i + 1;
	    }
	    else {
		$next_indx = $ci_items[$level + 1];
	    }
	    print_rtree($tree, $num_part, $level + 1, $num_level, $ptr_indx,
		       $next_indx, ($i < $r - 1 ? "| " : "  "),
		       $prp . $prefix);
	}
    }
}

# Prints the first column when there are no hash keys in it and prints
# the rest of the tree.
# Parameters:
# tree		- root of the tree
# num_part	- numerical part of tuples
# num_level	- level where the numerical part begins
# r		- upper index in the current column
sub print_nohash {
    my ($tree, $num_part, $num_level, $r) = @_;
    my ($i);
    for ($i = 0; $i < $r; $i++) {
	$ptr_indx = bytes2int(substr($tree, $tp, $ci_ptrsize[$level]),
			      $ci_ptrsize[$level]);
	$tp += $ci_ptrsize[$level];
	if ($level != $num_level) {
	    if ($i < $ci_items[$level] - 1) {
		$next_indx = bytes2int(substr($tree,
					      $tp +
					      ord(substr($ss, $level, 1)),
					      $ci_ptrsize[$level]),
				       $ci_ptrsize[$level]);
	    }
	    else {
		$next_indx = $ci_items[$level + 1];
	    }
	}
	if ($level != $num_level && $ptr_indx == $next_indx) {
	    next;
	}
	if (defined $fnames[0] && $fnames[0] ne "") {
	    $fn = $fnames[0];
	    open(DATA2, "| $fsahash -W -d $fn > tmp")
		or die "Cannot send data to fsa_hash";
	    printf DATA2 "%d\n", $i;
	    close(DATA2);
	    open(DATA2, "< tmp");
	    $w = <DATA2>;
	    chomp $w;
	    close(DATA2);
	    printf "(%s) ", $w;
	}
	else {
	    printf "%d", $i;
	}
	if ($level == $num_level) {
	    # Print numerical part
	    print_numerical_part($i);
	}
	else {
	    printf "\n";
	    # Print one level below
	    if ($version == 3 || $ci_ptrsize[0] == size_of_int($ci_items[1])) {
		print_tree($tree, $num_part, $level + 1, $num_level, $ptr_indx,
			   $next_indx, ($i < $r - 1 ? "| " : "  "),
			   "");
	    }
	    else {
		print_tree($tree, $num_part, $level + 1, $num_level,
			   $ptr_indx + $i,
			   $next_indx + $i + 1, ($i < $r - 1 ? "| " : "  "),
			   "");
	    }
	}
    }
}


sub print_numerical_part {
    my ($tindex) = @_;
    my ($i, $n, $expnt, $start, $negative, $j);
    $start = $tindex * ($tuple_size - $string_size);
    for ($i = $words; $i < $total; $i++) {
#	printf "\nword number $i, start is $start\n";
	if ($mant_size[$i - $words] == 0) {
	    # Integer number
	    $n = bytes2int(substr($num_part, $start, ord(substr($ss, $i, 1))),
			   ord(substr($ss, $i, 1)));
	    printf "\t%d", $n;
	}
	else {
	    # Real number
#	    printf "mant_size[%d]=%d\n", $i - $words, $mant_size[$i - $words];
	    $negative = 0;
	    $n = 0.0;
	    for ($j = 0; $j < $mant_size[$i - $words] - 1; $j++) {
#		  printf stderr "Adding %d (%x)\n",
#			 bytes2int(substr($num_part, $start + $j, 1), 1),
#			 bytes2int(substr($num_part, $start + $j, 1), 1);
		$n += bytes2int(substr($num_part, $start + $j, 1), 1);
		$n /= 256.0;
#		printf stderr "which gives $n after division\n";
	    }
#	      printf stderr "Adding %d (%x)\n",
#		     (ord(substr($num_part, $start + $j, 1)) & 0x7f),
#		     (ord(substr($num_part, $start + $j, 1)) & 0x7f);
	    $n += (ord(substr($num_part, $start + $j, 1)) & 0x7f);
	    $n /= 128.0;
#	    printf stderr "which gives $n after division\n";
	    if ((ord(substr($num_part, $start + $j, 1)) & 0x80) != 0) {
#		printf stderr "Negative!\n";
		$n = - $n;
	    }
	    
#	     $n = bytes2int(substr($num_part, $start, $mant_size[$i - $words]),
#			    $mant_size[$i - $words]);
#	     printf stderr "\n n=$n\n";
#	     $n /= (256 ** $mant_size[$i - $words]);
	    $expnt = sbytes2int(substr($num_part,
				      $start + $mant_size[$i - $words],
				      ord(substr($ss, $i, 1)) -
				      $mant_size[$i - $words]),
			       ord(substr($ss,$i,1)) - $mant_size[$i - $words]);
#	    printf stderr "expnt=$expnt\n";
	    $n *= 2 ** $expnt;
	    printf "\t%g", $n;
	}
	$start += ord(substr($ss, $i, 1));
    }
    printf "\n";
}

# Calculates the number of bytes necessary to store a given integer
# Parameters:
# n		- the integer.
# Returns:	- the number of bytes it takes to store it.
sub size_of_int {
    my ($n) = @_;
    my ($i);
    if ($n < 0) {
	$n = - $n + 1;
    }
    $i = 1;
    $n >>= 8;
    while ($n > 0) {
	$n >>= 8;
	$i++;
    }
    return $i;
}

# Prints synopsis
sub synopsis {
    printf stderr "Synopsis:\n";
    printf stderr "print_tuple.pl tuple dict...\n\n";
    printf stderr "where:\n";
    printf stderr "tuple is the file containing tuples\n";
    printf stderr "dict is the name of a perfect hash automaton for ith ";
    printf stderr "column\n";
}
