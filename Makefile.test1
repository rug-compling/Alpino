ifeq "$(shell if [ -r ../Makefile.include ]; then echo yes; fi)" "yes"
include ../Makefile.include
else
ifeq "$(shell if [ -r $(ALPINO_HOME)/Makefile.include ]; then echo yes; fi)" "yes"
include $(ALPINO_HOME)/Makefile.include
endif
endif

default:
	@echo "make test1 suite=SUITE"
	@echo "will run Alpino on the test suite ../Suites/SUITE"
	@echo "and will compare the results with the treebank in"
	@echo "../Treebank/SUITE/"
	@echo "In the first form, it will only find the first (best)"
	@echo "result. In the second form, it will find all (first 1000)"
	@echo "results, so you will see what the best possible result"
	@echo "for SUITE would be for the current grammar."
	@echo "Default options are specified in this Makefile using"
	@echo "variable SUITE_test1_options and SUITE_testN_options"
	@echo "You can always specify extra=\"<various alpino options>\" to"
	@echo "pass on any non-default options to Alpino."
	@echo
	@echo
	@echo "Each target typically creates its own working directory"
	@echo "for temporary stuff; in addition it appends summarizing"
	@echo "statistics to some of the files in a directory dedicated"
	@echo "to that suite."

include $(ALPINO_HOME)/Makefile.hpc

include $(ALPINO_HOME)/Makefile.errormining

cat=cat
LOGS=*/job*/log?

suitepath=../Suites
suite=cdb_sorted
dir=./
part=$(cdb_part)
debug=1

ifndef TMPDIR
TMPDIR=/tmp
endif

## defaults for test1 target
default_test1_options=-init_dict_p -test1 debug=$(debug) user_max=144000000

## defaults per suite for test1 target
cdb_part_test1_options= -flag treebank ../Treebank/cdb\
                        -flag syntax_features cdb/pc_weights\
                        cdb_part=$(part)
extra_test1_options=-flag syntax_features cdb/px_weights

## ensure it enters Treebank/PPH through the official route, so the
## links will work on HPC... :-(
PPH_test1_options=-flag treebank $(ALPINO_HOME)/Treebank/PPH -flag syntax_features cdb/pp_weights
dpc-ind_test1_options=-flag treebank $(ALPINO_HOME)/Treebank/dpc -flag syntax_features cdb/pd_weights
WIKI_test1_options=-flag treebank $(ALPINO_HOME)/Treebank/WIKI -flag syntax_features cdb/pw_weights
udtest_test1_options=-flag treebank $(ALPINO_HOME)/Treebank/WIKI -flag syntax_features cdb/pw_weights
PPI_test1_options=-flag treebank $(ALPINO_HOME)/Treebank/PPI -flag syntax_features cdb/pi_weights
WSU_test1_options=-flag treebank $(ALPINO_HOME)/Treebank/WSU -flag syntax_features cdb/pu_weights

job := job${shell echo $$$$}

test1:
	$(MAKE) $(suite).test1

$(suite).test1:
	mkdir -p $(suite)$(part)/$(job)
	echo "extra=$(extra)" >> $(suite)$(part)/scores
	-$(MAKE) trees dir=$(suite)$(part)/$(job) mode=1
	$(MAKE) test1rest job=$(job) suite=$(suite) part="$(part)"

test1rest:
	$(MAKE) -s bestall0 grep=BEST dir=$(suite)$(part)/$(job) \
          | awk '{ print $$2,$$3 }' | tee $(suite)$(part)/$(job)/scores
	grep 'BEST SCORE' $(suite)$(part)/$(job)/log1\
        | cut -d' ' -f1-15       > $(suite)$(part)/$(job)/score
	grep 'cputime total' $(suite)$(part)/$(job)/log1\
                                 > $(suite)$(part)/$(job)/time
	-grep '^T#' $(suite)$(part)/$(job)/log1\
                                 >> $(suite)$(part)/$(job)/time
	grep '^%XX' $(suite)$(part)/$(job)/times |\
                      awk '{ printf "sents   : %s\n",$$3 }'\
                        >> $(suite)$(part)/$(job)/scores
	grep '^%XX' $(suite)$(part)/$(job)/times |\
                      awk '{ printf "items   : %s\n",$$7 }'\
                        >> $(suite)$(part)/$(job)/scores
	cat $(suite)$(part)/$(job)/scores >> $(suite)$(part)/scores
	cat $(suite)$(part)/$(job)/scores >> $(suite)$(part)/$(job)/score
	grep -e '#LM' -e '#PT' -e 'Lexical analysis: ' $(suite)$(part)/$(job)/log1 > $(suite)$(part)/$(job)/poslemma
	$(MAKE) report
	-$(MAKE) compare_score suite=$(prefix)$(suite)
	touch $(suite)$(part).test1

cpu1=${shell ls -t $(suite)$(part)/*/log?|head -n 1}
cpu2=$(prefix)$(suite)$(part)/time

L1 := $(shell mktemp -u)
L2 := $(shell mktemp -u)
L3 := $(shell mktemp -u)

compare_cpu:
	@grep 'cputime total' $(cpu1) | awk '{ print $$3 }' >$(L1)
	@grep 'cputime total' $(cpu2)| awk '{ print $$3 }' >$(L2) 
	@grep 'Running parser(s) on' $(cpu1) | awk '{ print $$6 }' > $(L3)
	@echo "NEW	PREV		ITEM"
	@paste $(L1) $(L2) $(L3) |\
          awk 'BEGIN {I=1}                                                  \
                     { if (NF==3) {                                         \
                          if ($$1>1.1*$$2 && $$1>500)                      \
                             { F="???" };                                   \
                          if ($$2>1.1*$$1 && $$2>500)                      \
                             { F="!!!" };                                   \
                          if(F) { print $$1 "\t" $$2 "\t\t" $$3 "\t" F }    \
                          F="";                                             \
                          I=I+1;                                            \
                          N=N+$$1;                                          \
                          M=M+$$2 }                                         \
                     }                                                      \
               END {print "------------";                                   \
                    print "AVERAGES after " I-1 " sentences";               \
                    print "AV " N/(I-1) "\t" M/(I-1) "\t\t\t" (N/(I-1))/(M/(I-1)) "\t\t$(cpu1)"; \
                    print "================================================";           \
                   }' 
	rm -f $(L1) $(L2) $(L3)


score1=${shell ls -t $(suite)$(part)/job*/score|head -n 1}
score2=$(suite)$(part)/score

compare_score:
	@grep 'BEST SCORE' $(score1) | awk '{ print $$11, $$3, 1 }' \
                                      > $(L1)
	@grep 'BEST SCORE' $(score2) | awk '{ print $$11, $$3, 1 }' \
                                      > $(L2)
	@$(MAKE) compare_best0 suite=$(suite) L1=$(L1) L2=$(L2)
	rm -f $(L1) $(L2)

COMPARE_C=$(ALPINO_HOME)/TestN/compare_c 

compare_best0:
	echo $(L1) $(L2)
	@$(COMPARE_C) $(suite) $(L1) $(L2)
	@rm -f $(L1) $(L2)

compare_confidence:
	@grep '^Q' $(suite)$(part)/job*/log1 | awk -F\| '{ print $$1,$$6 }'\
           | sed -e 's/Q#//' > $(L1)
	@grep 'BEST SCORE' $(suite)$(part)/best | awk '{ print $$11,$$3 }'\
           > $(L2)
	@paste $(L1) $(L2) | awk '{ if ($$1==$$3) print $$2,$$4}' \
           | awk '    { N=N+1; if ($$1>=0 && $$2=="100.00") {O=O+1};\
                               if ($$1<0 && $$2!="100.00") {O=O+1};\
                               if ($$2=="100.00") {B=B+1} } \
                  END { printf "confidence: %.2f accuracy (baseline %.2f)\n",\
                               O/N,B/N } '
	@rm -f $(L1) $(L2)

GUIDES=
trees:
	@echo > $(dir)/times
	hostname -f >>$(dir)/times
	@echo `date` >> $(dir)/times
	@echo `hostname` >> $(dir)/times
	@echo "extra=$(extra)" >> $(dir)/times
	echo "parser_comparisons." | \
        $(ALPINO)\
          -flag suite $(suitepath)/$(suite)\
          $(default_test$(mode)_options)\
          $($(suite)_test$(mode)_options)\
          $(GUIDES)\
          $(extra) -notk cmdint=off\
                          2>$(dir)/log$(mode) | tee -a $(dir)/times #> $(dir)/result
	@cat $(dir)/times >> $(suite)$(part)/times

## REPORTING STATISTICS ETC

log=${shell ls -t */*/log?|head -n 1}


bestall0:
	@grep '$(grep) SCORE' $(dir)/log? |\
        awk '{ PEN=($$7 > $$9 ? $$7 : $$9)-$$5; P=P+PEN; N=N+($$7 > $$9 ? $$7 : $$9); T++; CA=CA+$$3} END { printf "$(grep): ca-score: %.3f\n", 100*(1-P/N); printf "$(grep): per-sent: %.3f\n",CA/T}'

## make report suite=SUITE n=N
## displays summarizing statistics of the last N runs for suite SUITE
n=5
report:
	@if [ -f $(suite)$(part)/times ]; then\
         grep '^%XX' $(suite)$(part)/times | tail -n $(n); fi
	@echo "WORST	FIRST	BEST	TREES/SENT"
	@if [ -f $(suite)$(part)/bests ]; then\
 echo "----- recent:";\
 grep 'readings/s' $(suite)$(part)/bests |tail -n $(n)|cut -d' ' -f 1  >$(TMPDIR)/.logrd ;\
 grep 'WORST: ca-score' $(suite)$(part)/bests | tail -n $(n) | cut -d' ' -f 3 >$(TMPDIR)/.logra ;\
 grep 'FIRST: ca-score' $(suite)$(part)/bests | tail -n $(n) | cut -d' ' -f 3 >$(TMPDIR)/.logrb ;\
 grep 'BEST: ca-score' $(suite)$(part)/bests | tail -n $(n) | cut -d' ' -f 3  >$(TMPDIR)/.logrc ;\
 paste $(TMPDIR)/.logra $(TMPDIR)/.logrb $(TMPDIR)/.logrc $(TMPDIR)/.logrd ;\
 fi
	@if [ -f $(suite)$(part)/scores ]; then\
          echo "----- recent:";\
          grep ca-score $(suite)$(part)/scores | tail -n $(n); fi
	@$(MAKE) -s reportcurrentscore

reportcurrentscore:
	@if [ -f $(suite)$(part)/score ]; then\
          echo "----- expected:";\
          grep ca-score $(suite)$(part)/score | head -n1; fi

suites=leuven_yellow_pages cgn_exs lassy g_suite h_suite i_suite m_suite lot_test_suite1 wpspel extra PPH PPH PPI WIKI WSU

clean:
	for suite in $(suites) $(CGNSUITES) ;\
        do rm -rf $$suite/job*;\
        done

JOBNAME=$(suite)$(part).t
SHORTJOBNAME=$(ssuite).t
ssuite=$(shell echo $(suite)$(part) | tr -d "aeiou_" | rev | cut -c-8 | rev)

cf:
	@echo "       %ACCURACY        #ITEMS            #MSEC/s         #SENTS    SUITE"
	@echo "      NEW     OLD      NEW      OLD      NEW    OLD      N      O"
	@$(MAKE) -s cf0 |\
            awk '{ GX=" "; HX=" ";\
                   if ($$1>$$2) {GX="!"};\
                   if ($$2>$$1) {GX="?"};\
                   if ($$5>(1.1 * $$6)) {HX="?"};\
                   if ($$6>(1.1 * $$5)) {HX="!"};\
                   printf "%s %7.3f %7.3f %8d %8d %s %6d %6d %6d %6d %s %s %s\n",\
                               GX,$$1,$$2,$$3,$$4,HX,$$5,$$6,$$7,$$8,$$9,$$10,$$11;\
                   N=N+1; A=A+$$1; B=B+$$2; C=C+$$3; D=D+$$4;\
                                            E=E+$$5; F=F+$$6; G=G+$$7; H=H+$$8; }\
                END {printf "\n  %7.3f %7.3f %8d %8d  %6d %6d %6.1f %6.1f mean\n",\
                       A/N,B/N,C/N,D/N,E/N,F/N,G/N,H/N}'

tf0:
	@for suite in $(suites);\
        do\
            if [ -r $$suite/job*/times ];\
            then echo $$suite `grep '^%XX' $$suite/times| awk '{ print $$5 }' | tail -n 2` ;\
            fi\
        done

tf:
	@echo "     OLD      NEW   SUITE"
	@$(MAKE) -s tf0 | awk '{ printf "%8d %8d   %s\n",$$2,$$3,$$1}'

cf0:
	for file in `echo $(shell ls $(ORDERED) */*/scores 2>/dev/null)`; do \
        suite=`echo $$file | awk -F/ '{ print $$1 }'`;\
        times=`echo $$file | sed -e 's/scores/times/'`;\
        time=`echo $$file | sed -e 's/scores/time/'`;\
        echo `grep 'ca-score:' $$file | awk '{ print $$2 }' `"	"`if [ -f $$suite/score ]; then grep 'ca-score:' $$suite/score | tail -n 2 | head -n 1 | awk '{ print $$2 }' ; fi`"	"`grep 'items' $$file | awk '{ print $$3 }' `"	"`if [ -f $$suite/score ]; then grep 'items' $$suite/score | tail -n 2 | head -n 1 | awk '{ print $$3 }' ; fi`"	"`awk -F\| '/^T\#/{ N++; P=P+$$4 } END { print P/N}' $$time`"	"`awk -F\| '/^T\#/{ N++; P=P+$$4 } END { print P/N}' $$suite/time`"	"`grep 'sents' $$file | awk '{ print $$3 }' `"	"`if [ -f $$suite/score ]; then grep 'sents' $$suite/score | tail -n 2 | head -n 1 | awk '{ print $$3 }' ; fi`"	"$$suite"	"`grep extra= $$times|sed -e 's/extra=//'`"	"`echo $$file| awk -F/ '{ print $$2 }'`;\
        done

upd_all:
	@for file in `echo $(shell ls $(ORDERED) */*/poslemma 2>/dev/null)`; do \
        suite=`echo $$file | awk -F/ '{ print $$1 }'`;\
	echo "cp $$file $(prefix)$$suite/";\
        done
	@for file in `echo $(shell ls $(ORDERED) */*/score 2>/dev/null)`; do \
        suite=`echo $$file | awk -F/ '{ print $$1 }'`;\
	echo "cp $$file $(prefix)$$suite/";\
        done
	@for file in `echo $(shell ls $(ORDERED) */*/best 2>/dev/null)`; do \
        suite=`echo $$file | awk -F/ '{ print $$1 }'`;\
	echo "cp $$file $(prefix)$$suite/";\
        done
	@for file in `echo $(shell ls $(ORDERED) */*/time 2>/dev/null)`; do \
        suite=`echo $$file | awk -F/ '{ print $$1 }'`;\
	echo "cp $$file $(prefix)$$suite/";\
        done
	@for file in `echo $(shell ls $(ORDERED) */*/result 2>/dev/null)`; do \
        suite=`echo $$file | awk -F/ '{ print $$1 }'`;\
	echo "cp $$file $(prefix)$$suite/";\
        done

rm_all:
	@for dir in */job*;\
         do\
             if    cmp -s $$dir/score $$dir/../score \
                || cmp -s $$dir/best $$dir/../best     ;\
             then echo "rm -rf $$dir";\
             fi;\
         done

ORDERED=-rt

compare_score_logs:
	@for file in `echo $(shell ls $(ORDERED) $(suite)$(part)/*/log1 2>/dev/null)`;\
        do echo $$file;\
           $(MAKE) -s compare_score score1=$$file suite=$(prefix)$(suite)$(part);\
        done

IS=0 1 2 3 4 5 6 7 8 9

cdb_parts1:
	for i in $(IS); do $(MAKE) cdb_partX part=$$i; done

cdb_partX:
	xxx $(MAKE) job HPCTARGET="test1 suite=cdb_part cdb_part=$(part)" suite=cdb_part

hpctests:
	make job HPCTARGET=test1 suite=cdb_part cdb_part=0
	make job HPCTARGET=test1 suite=cdb_part cdb_part=1
	make job HPCTARGET=test1 suite=cdb_part cdb_part=2
	make job HPCTARGET=test1 suite=cdb_part cdb_part=3
	make job HPCTARGET=test1 suite=cdb_part cdb_part=4
	make job HPCTARGET=test1 suite=cdb_part cdb_part=5
	make job HPCTARGET=test1 suite=cdb_part cdb_part=6
	make job HPCTARGET=test1 suite=cdb_part cdb_part=7
	make job HPCTARGET=test1 suite=cdb_part cdb_part=8
	make job HPCTARGET=test1 suite=cdb_part cdb_part=9
	make job HPCTARGET=test1 suite=PPH
	make job HPCTARGET=test1 suite=dpc-ind
	make job HPCTARGET=test1 suite=WIKI
	make job HPCTARGET=test1 suite=PPI
	make job HPCTARGET=test1 suite=WSU
	make shortjob HPCTARGET=test1 suite=g_suite
	make shortjob HPCTARGET=test1 suite=h_suite
	make shortjob HPCTARGET=test1 suite=i_suite
	make shortjob HPCTARGET=test1 suite=m_suite
	make shortjob HPCTARGET=test1 suite=extra
	make shortjob HPCTARGET=test1 suite=leuven_yellow_pages
	make shortjob HPCTARGET=test1 suite=lot_test_suite1
	make shortjob HPCTARGET=test1 suite=cgn_exs
	make shortjob HPCTARGET=test1 suite=qa
	make shortjob HPCTARGET=test1 suite=wpspel

tests: ts ds cgns t24

ts: cdbt t15 t16 t17 t18 t19 t20 t21 t22 t23 t25 t26 t27

cdbt: t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 

ds: t10 t11 t12 t13 t14

t0:
	make test1 suite=cdb_part cdb_part=0
t1:
	make test1 suite=cdb_part cdb_part=1
t2:
	make test1 suite=cdb_part cdb_part=2
t3:
	make test1 suite=cdb_part cdb_part=3
t4:
	make test1 suite=cdb_part cdb_part=4
t5:
	make test1 suite=cdb_part cdb_part=5
t6:
	make test1 suite=cdb_part cdb_part=6
t7:
	make test1 suite=cdb_part cdb_part=7
t8:
	make test1 suite=cdb_part cdb_part=8
t9:
	make test1 suite=cdb_part cdb_part=9
t10:
	make test1 suite=PPH
t11:
	make test1 suite=PPI
t12:
	make test1 suite=WSU
t13:
	make test1 suite=WIKI
t14:
	make test1 suite=dpc-ind
t15:
	make test1 suite=g_suite
t16:
	make test1 suite=h_suite
t17:
	make test1 suite=i_suite
t18:
	make test1 suite=extra
t19:
	make test1 suite=leuven_yellow_pages
t20:
	make test1 suite=lot_test_suite1
t21:
	make test1 suite=cgn_exs
t22:
	make test1 suite=qa
t23:
	make test1 suite=wpspel
t24:
	make test1 suite=lassy
t25:
	make test1 suite=novelsample_corrected
t26:
	make test1 suite=eans
t27:
	make test1 suite=m_suite


jobsuites=$(sort $(dir $(wildcard */job*)))

cs:
	for j in $(jobsuites); do $(MAKE) -s compare_score_logs suite=$$j; done

cg:
	@for file in `ls -tr */job*/log*`;\
        do echo $$file;\
           $(MAKE) -s compare_cpu cpu1=$$file cpu2=`dirname $$file`/../time;\
        done | grep '^AV '

SCORES=cdb_part?/score
TIMES=cdb_part?/time

overview:
	$(MAKE) -s overviewc overviewa overviewd overviewp overviewu overvieww overviewi overviewcgn


overviewcgn:
	@echo CGN:
	@$(MAKE) -s overview0 SCORES="f[nv]??????/score" TIMES="f[nv]??????/time"
	@echo NL CGN:
	@$(MAKE) -s overview0 SCORES="f[n]??????/score" TIMES="f[n]??????/time"
	@echo VL CGN:
	@$(MAKE) -s overview0 SCORES="f[v]??????/score" TIMES="f[v]??????/time"

overviewc:
	@echo "cdb"
	@$(MAKE) -s overview0 SCORES="cdb_part?/score"\
                              TIMES="cdb_part?/time"

overviewa:
	@echo "cdb + pph + dpc-ind"
	@$(MAKE) -s overview0 SCORES="cdb_part?/score dpc-ind/score PPH/score"\
                              TIMES="cdb_part?/time dpc-ind/time PPH/time"

overviewd:
	@echo "dpc-ind"
	@$(MAKE) -s overview0 SCORES="dpc-ind/score " TIMES="dpc-ind/time"

overviewp:
	@echo "PPH"
	@$(MAKE) -s overview0 SCORES="PPH/score " TIMES="PPH/time"

overviewu:
	@echo "WSU"
	@$(MAKE) -s overview0 SCORES="WSU/score " TIMES="WSU/time"

overvieww:
	@echo "wiki"
	@$(MAKE) -s overview0 SCORES="WIKI/score " TIMES="WIKI/time"

overviewi:
	@echo "PPI"
	@$(MAKE) -s overview0 SCORES="PPI/score " TIMES="PPI/time"

overview0:
	@$(MAKE) -s cascore | awk '{ printf "%.2f %%CA\n",$$0}'
#	@cat $(SCORES)| grep 'BEST SCORE' | awk '{ print $$3 }' |mean|\
                awk '{ printf "%.2f %%CA/sentence\n",$$0}'
	@cat $(TIMES) | grep '^T#' | awk -F\| '{ print $$4 }' |\
                mean | awk '{ printf "%.0f msec/sentence\n",$$0}'

fscore:
	@awk '/^BEST SCORE/ { OV=OV+$$5; CORR=CORR+$$7; SYS=SYS+$$9}\
             END {P=OV/SYS; R=OV/CORR; F=(2*P*R)/(P+R);\
                    printf "precision: %.2f recall: %.2f f-score: %.2f\n",\
                          100*P,100*R,100*F}' $(SCORES)

cascore:
	@awk '/^BEST SCORE/ { PEN=($$7 > $$9 ? $$7 : $$9)-$$5; P=P+PEN; N=N+($$7 > $$9 ? $$7 : $$9); }\
             END { print 100*(1-P/N)}' $(SCORES)

short_report:
	@if [ -r $(suite)/score -a -r $(suite)/time ]; then echo `grep ca-score $(suite)/score | tail -n 1 | awk '{ printf "%.2f\n", $$2 }'` "	"`grep '^T#' $(suite)/time | awk -F\| '{ print $$4 }' | mean | awk '{ printf "%.0f\n",$$0}'` "	"`grep -c '^BEST SCORE' $(suite)/score`"	$(suite)" ; fi

reports:
	for suite in $(suites); do\
        $(MAKE) --no-print-directory short_report suite=$$suite;\
        done

cdb_report:
	@echo "CA%	msec/s	suite"
	@for suite in cdb_part?;\
         do $(MAKE) -s short_report suite=$$suite;\
         done

exact:
	cat $(SCORES) | awk '/BEST SCORE:/ { N++; if($$3 == "100.00") M++; } \
                            END { print M/N }'

complete_test1:
	ls -d */job* | awk -F '/' '{printf "make test1rest suite=%s job=%s\n",$$1,$$2 }'

kill:
	-ps -ef |grep sicstus | grep test1 | awk '{ print $$2 }' | xargs kill
	rm -rf */job*


CGNDIR=/net/corpora/CGN-in-alpino-xml
cgns: cgn1 cgn2 cgn3 cgn4 cgn5 cgn6 cgn7 cgn8 cgn9 cgn10 cgn11 cgn12 cgn13 cgn14 cgn15 cgn16 cgn17 cgn18 cgn19 cgn20 cgn21 cgn22 cgn23 cgn24 cgn25 cgn26 cgn27 cgn28 cgn29 cgn30 cgn31 cgn32 cgn32 cgn33 cgn34 cgn35 cgn36 cgn37 cgn38 cgn39 cgn40 cgn41 cgn42 cgn43

cgn1:
	make test1 suitepath=$(CGNDIR)/comp-a/nl suite=fn000595 extra="-flag treebank $(CGNDIR)/comp-a/nl/fn000595"
cgn2:
	make test1 suitepath=$(CGNDIR)/comp-a/nl suite=fn000276 extra="-flag treebank $(CGNDIR)/comp-a/nl/fn000276"
cgn3:
	make test1 suitepath=$(CGNDIR)/comp-a/nl suite=fn000321 extra="-flag treebank $(CGNDIR)/comp-a/nl/fn000321"
cgn4:
	make test1 suitepath=$(CGNDIR)/comp-a/nl suite=fn000841 extra="-flag treebank $(CGNDIR)/comp-a/nl/fn000841"
cgn5:
	make test1 suitepath=$(CGNDIR)/comp-a/vl suite=fv400067 extra="-flag treebank $(CGNDIR)/comp-a/vl/fv400067"
cgn6:
	make test1 suitepath=$(CGNDIR)/comp-a/vl suite=fv400080 extra="-flag treebank $(CGNDIR)/comp-a/vl/fv400080"
cgn7:
	make test1 suitepath=$(CGNDIR)/comp-a/vl suite=fv400282 extra="-flag treebank $(CGNDIR)/comp-a/vl/fv400282"
cgn8:
	make test1 suitepath=$(CGNDIR)/comp-a/vl suite=fv400388 extra="-flag treebank $(CGNDIR)/comp-a/vl/fv400388"
cgn9:
	make test1 suitepath=$(CGNDIR)/comp-c/nl suite=fn008006 extra="-flag treebank $(CGNDIR)/comp-c/nl/fn008006"
cgn10:
	make test1 suitepath=$(CGNDIR)/comp-c/nl suite=fn008056 extra="-flag treebank $(CGNDIR)/comp-c/nl/fn008056"
cgn11:
	make test1 suitepath=$(CGNDIR)/comp-h/nl suite=fn009132 extra="-flag treebank $(CGNDIR)/comp-h/nl/fn009132"
cgn12:
	make test1 suitepath=$(CGNDIR)/comp-h/vl suite=fv400034 extra="-flag treebank $(CGNDIR)/comp-h/vl/fv400034"
cgn13:
	make test1 suitepath=$(CGNDIR)/comp-i/nl suite=fn007164 extra="-flag treebank $(CGNDIR)/comp-i/nl/fn007164"
cgn14:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn001602 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn001602"
cgn15:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn001604 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn001604"
cgn16:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn001769 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn001769"
cgn17:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn001826 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn001826"
cgn18:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn001949 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn001949"
cgn19:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn002034 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn002034"
cgn20:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn002068 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn002068"
cgn21:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn002157 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn002157"
cgn22:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn002157 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn002157"
cgn23:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn002910 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn002910"
cgn24:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn003374 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn003374"
cgn25:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn003439 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn003439"
cgn26:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn003577 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn003577"
cgn27:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn003972 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn003972"
cgn28:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn005610 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn005610"
cgn29:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn005740 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn005740"
cgn30:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn006104 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn006104"
cgn31:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn006104 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn006104"
cgn32:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn006639 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn006639"
cgn33:
	make test1 suitepath=$(CGNDIR)/comp-k/vl suite=fv600025 extra="-flag treebank $(CGNDIR)/comp-k/vl/fv600025"
cgn34:
	make test1 suitepath=$(CGNDIR)/comp-k/vl suite=fv601017 extra="-flag treebank $(CGNDIR)/comp-k/vl/fv601017"
cgn35:
	make test1 suitepath=$(CGNDIR)/comp-l/vl suite=fv600529 extra="-flag treebank $(CGNDIR)/comp-l/vl/fv600529"
cgn36:
	make test1 suitepath=$(CGNDIR)/comp-m/nl suite=fn000298 extra="-flag treebank $(CGNDIR)/comp-m/nl/fn000298"
cgn37:
	make test1 suitepath=$(CGNDIR)/comp-o/vl suite=fv800085 extra="-flag treebank $(CGNDIR)/comp-o/vl/fv800085"
cgn38:
	make test1 suitepath=$(CGNDIR)/comp-o/vl suite=fv800095 extra="-flag treebank $(CGNDIR)/comp-o/vl/fv800095"
cgn39:
	make test1 suitepath=$(CGNDIR)/comp-o/vl suite=fv800195 extra="-flag treebank $(CGNDIR)/comp-o/vl/fv800195"
cgn40:
	make test1 suitepath=$(CGNDIR)/comp-o/vl suite=fv800585 extra="-flag treebank $(CGNDIR)/comp-o/vl/fv800585"
cgn41:
	make test1 suitepath=$(CGNDIR)/comp-o/vl suite=fv800975 extra="-flag treebank $(CGNDIR)/comp-o/vl/fv800975"
cgn42:
	make test1 suitepath=$(CGNDIR)/comp-o/vl suite=fv801065 extra="-flag treebank $(CGNDIR)/comp-o/vl/fv801065"
cgn43:
	make test1 suitepath=$(CGNDIR)/comp-o/vl suite=fv801195 extra="-flag treebank $(CGNDIR)/comp-o/vl/fv801195"


analyse:
	@$(MAKE) analyse0 analyse1 files=*/job*/log1

lsuites=leuven_yellow_pages cgn_exs lassy g_suite h_suite i_suite eans lot_test_suite1 wpspel extra cdb_part?

sota:
	@$(MAKE) analyse0 analyse1 files="$(lsuites:%=%/poslemma)"
	

an:
	@for j in $(jobsuites); do $(MAKE) -s analyse1 files=$$j/job*/log*; done


analyse0:
	@echo "        WORD                                    TREEBANK                                PARSER" > pos
	@echo "        WORD                                    TREEBANK                                PARSER" > lem
	@cat  $(files) | grep "#PT" | cut -c1-120 |sort | uniq -c | sort -nr				       >>pos
	@cat  $(files) | grep "#LM" | cut -c1-120 |sort | uniq -c | sort -nr				       >>lem
	@echo "        WORD                                    TREEBANK                                PARSER" >>pos
	@echo "        WORD                                    TREEBANK                                PARSER" >>lem

analyse1:
	@echo $(files)
	@echo -n "lemma accuracy: "
	@mistakes=`cat $(files) | grep -c "#LM"` ; \
         cat $(files) | grep 'Lexical analysis: ' | awk "{ N=N+\$$3 } END { print 100*(1 - $$mistakes/N)  }"
	@echo -n "postag accuracy: "
	@mistakes=`cat $(files) | grep -c "#PT"` ; \
         cat $(files) | grep 'Lexical analysis: ' | awk "{ N=N+\$$3 } END { print 100*(1 - $$mistakes/N) }"
