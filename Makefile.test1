ifeq "$(shell if [ -r ../Makefile.include ]; then echo yes; fi)" "yes"
include ../Makefile.include
else
ifeq "$(shell if [ -r $(ALPINO_HOME)/Makefile.include ]; then echo yes; fi)" "yes"
include $(ALPINO_HOME)/Makefile.include
endif
endif

SHELL=/bin/bash

default:
	@echo "make test1 suite=SUITE"
	@echo "will run Alpino on the test suite ../Suites/SUITE"
	@echo "and will compare the results with the treebank in"
	@echo "../Treebank/SUITE/"
	@echo "In the first form, it will only find the first (best)"
	@echo "result. In the second form, it will find all (first 1000)"
	@echo "results, so you will see what the best possible result"
	@echo "for SUITE would be for the current grammar."
	@echo "Default options are specified in this Makefile using"
	@echo "variable SUITE_test1_options and SUITE_testN_options"
	@echo "You can always specify extra=\"<various alpino options>\" to"
	@echo "pass on any non-default options to Alpino."
	@echo
	@echo "Each target typically creates its own working directory"
	@echo "for temporary stuff; in addition it appends summarizing"
	@echo "statistics to some of the files in a directory dedicated"
	@echo "to that suite."

include $(ALPINO_HOME)/Makefile.test

## defaults for test1 target
default_test1_options=-init_dict_p -test1 user_max=144000000

## defaults per suite for test1 target
cdb_options= -flag treebank ../Treebank/cdb\
             -flag syntax_features cdb/pc_weights\
             -flag suite ../Suites/cdb_part
cdb_part0_test1_options= $(cdb_options) cdb_part=0
cdb_part1_test1_options= $(cdb_options) cdb_part=1
cdb_part2_test1_options= $(cdb_options) cdb_part=2
cdb_part3_test1_options= $(cdb_options) cdb_part=3
cdb_part4_test1_options= $(cdb_options) cdb_part=4
cdb_part5_test1_options= $(cdb_options) cdb_part=5
cdb_part6_test1_options= $(cdb_options) cdb_part=6
cdb_part7_test1_options= $(cdb_options) cdb_part=7
cdb_part8_test1_options= $(cdb_options) cdb_part=8
cdb_part9_test1_options= $(cdb_options) cdb_part=9
extra_test1_options=-flag syntax_features cdb/px_weights
ovistest_test1_options=-flag treebank ../Treebank/ovis
Titaantjes-silver_test1_options=-flag treebank ../Treebank/Titaantjes
Titaantjes-orig_test1_options=-flag treebank ../Treebank/Titaantjes

job := job${shell echo $$$$}

test1: $(suite).test1

## directory "suite" needs to exist!
%.test1:%
	@mkdir -p $*/$(job)
	@echo "extra=$(extra)" >> $*/scores
	$(MAKE) trees dir=$*/$(job) suite=$*
	$(MAKE) test1rest dir=$*/$(job)

trees:
	@echo > $(dir)/times
	@hostname -f >>$(dir)/times
	@echo `date` >> $(dir)/times
	@echo `hostname` >> $(dir)/times
	@echo "extra=$(extra)" >> $(dir)/times
	echo "parser_comparisons." | \
        $(ALPINO)\
          -flag suite $(suitepath)/$(suite)\
          $(default_test1_options)\
          $($(suite)_test1_options)\
          $(extra) -notk cmdint=off\
                          2>$(dir)/log | tee -a $(dir)/times 
	@cat $(dir)/times >> $(dir $(dir $(dir)))/times

test1rest:
	grep 'BEST SCORE' $(dir)/log |\
        awk '    { PEN=($$7 > $$9 ? $$7 : $$9)-$$5;\
                   P=P+PEN; N=N+($$7 > $$9 ? $$7 : $$9);\
                   T++; CA=CA+$$3\
                 }\
             END { printf "ca-score: %.3f\n", 100*(1-P/N);\
                   printf "per-sent: %.3f\n",CA/T\
                 }'\
            | tee $(dir)/scores
	grep 'BEST SCORE' $(dir)/log | cut -d' ' -f1-15       > $(dir)/score
	-grep '^MWU#' $(dir)/log                               > $(dir)/mwu
	grep 'cputime total' $(dir)/log                       > $(dir)/time
	grep '^T#' $(dir)/log                                >> $(dir)/time
	grep '^%XX' $(dir)/times |\
             awk '{ printf "sents   : %s\n",$$3 }'            >> $(dir)/scores
	grep '^%XX' $(dir)/times |\
             awk '{ printf "items   : %s\n",$$7 }'            >> $(dir)/scores
	cat $(dir)/scores                                     >> $(dir $(dir $(dir)))/scores
	cat $(dir)/scores                                     >> $(dir)/score
	grep -e 'LM#' -e 'PT#' \
             -e 'Lexical analysis: ' $(dir)/log               > $(dir)/poslemma
	$(MAKE) report


## REPORTING STATISTICS ETC

### make report suite=SUITE n=N
### displays summarizing statistics of the last N runs for suite SUITE
n=5
report:
	@if [ -f $(dir $(dir $(dir)))/times ]; then\
         grep '^%XX' $(dir $(dir $(dir)))/times | tail -n $(n); fi
	@echo "WORST	FIRST	BEST	TREES/SENT"
	@if [ -f $(dir $(dir $(dir)))/bests ]; then\
          echo "----- recent:";\
          paste <(grep 'readings/s'      $(dir $(dir $(dir)))/bests | tail -n $(n) | cut -d' ' -f 1)\
                <(grep 'WORST: ca-score' $(dir $(dir $(dir)))/bests | tail -n $(n) | cut -d' ' -f 3)\
                <(grep 'FIRST: ca-score' $(dir $(dir $(dir)))/bests | tail -n $(n) | cut -d' ' -f 3)\
                <(grep 'BEST: ca-score'  $(dir $(dir $(dir)))/bests | tail -n $(n) | cut -d' ' -f 3);\
        fi
	@if [ -f $(dir $(dir $(dir)))/scores ]; then\
          echo "----- recent:";\
          grep ca-score $(dir $(dir $(dir)))/scores | tail -n $(n); fi
	@$(MAKE) -s reportcurrentscore

reportcurrentscore:
	@if [ -f $(dir $(dir $(dir)))/score ]; then\
          echo "----- expected:";\
          grep ca-score $(dir $(dir $(dir)))/score | head -n1; fi

### make ptf: compare finished tests wrt postag accuracy
PTFS=$(sort $(wildcard */*/poslemma))

ptf:
ifeq ($(strip $(PTFS)),)
	@echo "ptf: nothing to do"
else
	@echo "  OLD    NEW        SUITE"
	@$(MAKE) -s $(PTFS:%/poslemma=%/ptf) | tr -d '()%' |\
	     awk '{ XX="   ";\
                    if ($$1 < $$2) XX="!!!";\
                    if ($$2 < $$1) XX="???";\
                    printf "%6.2f %6.2f   %s %s\n",$$1,$$2,XX,$$3}'
endif

%/ptf:%/poslemma
	echo `grep '^#PT#' $(dir $(dir $*))/poslemma|\
          tail -n1 | awk '{ print $$5 }'` `grep '^#PT#' $< |\
          tail -n1 | awk '{ print $$5 }'` $(dir $(dir $*))


### make lmf: compare finished tests wrt lemma  accuracy
lmf:
ifeq ($(strip $(PTFS)),)
	@echo "lmf: nothing to do"
else
	@echo "  OLD    NEW        SUITE"
	@$(MAKE) -s $(PTFS:%/poslemma=%/lmf) | tr -d '()%' |\
	     awk '{ XX="   ";\
                    if ($$1 < $$2) XX="!!!";\
                    if ($$2 < $$1) XX="???";\
                    printf "%6.2f %6.2f   %s %s\n",$$1,$$2,XX,$$3}'

%/lmf:%/poslemma
	echo `grep '^#LM#' $(dir $(dir $*))poslemma|\
              tail -n1 | awk '{ print $$5 }'` `grep '^#LM#' $< |\
              tail -n1 | awk '{ print $$5 }'` $(dir $(dir $*))
endif

SCORES=$(sort $(wildcard */*/scores))

### make cf: compare finished tests wrt concept accuracy
cf:
ifeq ($(strip $(SCORES)),)
	@echo "cf: nothing to do"
else
	@echo "       %ACCURACY        #ITEMS            #MSEC/s         #SENTS    LOG	           EXTRA"
	@echo "      NEW     OLD      NEW      OLD      NEW    OLD      N      O"
	@$(MAKE) -s $(SCORES:%/scores=%/cf) |\
            awk '{ GX=" "; HX=" ";\
                   if ($$1>$$2) {GX="!"};\
                   if ($$2>$$1) {GX="?"};\
                   if ($$5>(1.1 * $$6)) {HX="?"};\
                   if ($$6>(1.1 * $$5)) {HX="!"};\
                   printf "%s %7.3f %7.3f %8d %8d %s %6d %6d %6d %6d %s",\
                               GX,$$1,$$2,$$3,$$4,HX,$$5,$$6,$$7,$$8,$$9;\
		   out=""; for (i=10; i<=NF;i++){out = out " " $$i}; print out;\
                   N=N+1; A=A+$$1; B=B+$$2; C=C+$$3; D=D+$$4;\
                                            E=E+$$5; F=F+$$6; G=G+$$7; H=H+$$8; }\
                END {printf "\n  %7.3f %7.3f %8d %8d  %6d %6d %6.1f %6.1f mean\n",\
                       A/N,B/N,C/N,D/N,E/N,F/N,G/N,H/N}'
endif

%/cf:%/scores
	@echo `grep 'ca-score:' $< | awk '{ print $$2 }' `"	"`if [ -f $(dir $(dir $*))/score ]; then grep 'ca-score:' $(dir $(dir $*))/score | tail -n 2 | head -n 1 | awk '{ print $$2 }' ; fi`"	"`grep 'items' $< | awk '{ print $$3 }' `"	"`if [ -f $(dir $(dir $*))/score ]; then grep 'items' $(dir $(dir $*))/score | tail -n 2 | head -n 1 | awk '{ print $$3 }' ; fi`"	"`awk -F\| '/^T#/{ N++; P=P+$$4 } END { print P/N}' $(dir $<)/time`"	"`awk -F\| '/^T#/{ N++; P=P+$$4 } END { print P/N}' $(dir $(dir $*))/time`"	"`grep 'sents' $< | awk '{ print $$3 }' `"	"`if [ -f $(dir $(dir $*))/score ]; then grep 'sents' $(dir $(dir $*))/score | tail -n 2 | head -n 1 | awk '{ print $$3 }' ; fi`"	" $(dir $<)"	"`grep extra= $(dir $<)/times|sed -e 's/extra=//'`

### compare concept accuracy of all running and finished tests
cs: $(JOBS:%/log=%/compare)

COMPARE_C=$(ALPINO_HOME)/TestN/compare_c 

## this uses number of correct triples ($7), as approx of sentence length,
## rather than number of parses, which is always 1 anyway for test1
%/compare: %/log
	@echo $(dir $(dir $*))
	-@$(COMPARE_C) $(dir $(dir $*))\
           <(grep 'BEST SCORE' $< | awk '{ print $$11, $$3, $$7 }' ) \
	   <(grep 'BEST SCORE' $(dir $(dir $*))/score | awk '{ print $$11, $$3, $$7 }' )

### total fscore of all finished tests
fscore:
	@awk '/^BEST SCORE/ { OV=OV+$$5; CORR=CORR+$$7; SYS=SYS+$$9}\
             END {P=OV/SYS; R=OV/CORR; F=(2*P*R)/(P+R);\
                    printf "precision: %.2f recall: %.2f f-score: %.2f\n",\
                          100*P,100*R,100*F}' $(SCORES)

### total cascore of all finished tests
cascore:
	@awk '/^BEST SCORE/ { PEN=($$7 > $$9 ? $$7 : $$9)-$$5; P=P+PEN;\
                              N=N+($$7 > $$9 ? $$7 : $$9); }\
                        END { print 100*(1-P/N)}' $(SCORES)

### total exact match score of all finished tests
exact:
ifeq ($(strip $(SCORES)),)
	@echo "exact: nothing to do"
else
	cat $(SCORES)\
        | awk '/BEST SCORE:/ { N++; if($$3 == "100.00") M++; } \
                         END { print M/N }'
endif

PATTERNS=cdb extra fn fv f[nv] novel 

SUITESDIR=.Suites/

overview:
	@printf "%10s%8s%8s%8s%10s%8s%9s%9s\n" "PART" "CA %" "msec/s" "#s" "#w" "mean l" "lemma %" "postag %"
	@for P in $(PATTERNS);\
         do $(MAKE) -s overview0 PATTERN=$$P | xargs |\
             awk '{printf "%10s%8.2f%8.0f%8s%10s%8.1f%9.2f%9.2f\n" ,\
                     $$1,$$2,$$3,$$4,$$5,$$5/$$4,$$6,$$7}';\
         done
	@$(MAKE) -s overview0 PATTERN= | xargs |\
             awk '{printf "%10s%8.2f%8.0f%8s%10s%8.1f%9.2f%9.2f\n" ,\
                     "total",$$1,$$2,$$3,$$4,$$4/$$3,$$5,$$6}'

overview0:
	@echo $(PATTERN)
	@$(MAKE) -s cascore SCORES=$(PATTERN)*/score 
	@cat $(PATTERN)*/time | grep '^T#' | awk -F\| '{ print $$4 }' |\
                mean 
	@cat $(SUITESDIR)/$(PATTERN)*.sents | wc -l
	@cat $(SUITESDIR)/$(PATTERN)*.sents | wc -w
	@for file in `ls $(PATTERN)*/poslemma`; do cat $$file\
          | grep '^#LM#' | tail -n1 | sed -e 's/#LM#//'; done\
          | awk 'END {printf "%.2f\n",100*C/T} {C = C+$$1;T=T+$$3}'
	@for file in `ls $(PATTERN)*/poslemma`; do cat $$file\
          | grep '^#PT#' | tail -n1 | sed -e 's/#PT#//'; done\
          | awk 'END {printf "%.2f\n",100*C/T} {C = C+$$1;T=T+$$3}'

### f: show results of finished tests for CA, postag, lemma
f: cf ptf lmf

### d: show results of running tests for CA and new postag/lemma mistakes
d: cs pt_diffs

PTS=$(wildcard */job*/log)

### find new postag/lemma mistakes in running tests
### (this does not show improvements)
pt_diffs: $(PTS:%=%.pt)

%.pt:
	@if diff -w <(grep -e ' #LM' -e ' #PT'  $(dir $*)../poslemma)\
                    <(grep -e ' #LM' -e ' #PT' $*)\
        | grep '^[>]'; then true ; else true; fi

### more reporting stuff, in particular for lemma and postag

GREP=grep -v -e ^fn -e ^fv -e ^ovis -e ^Titaantjes[-]

LASSY=/net/corpora/LassyDevelop
EXTRA=$(LASSY)/Test/*/poslemma

## find all lemma mistakes for relevant suites, including LassySmall
lemmas:
	ls $(EXTRA) */poslemma |$(GREP)| xargs cat |grep ' #LM' |\
        awk '{ print $$1,$$2,$$3 }' |sort | uniq -c |sort -n

## find all postag mistakes for relevant suites, including LassySmall, sorted by frequency
postags:
	ls $(EXTRA) */poslemma |$(GREP)| xargs cat |grep ' #PT' |\
        awk '{ print $$1,$$2,$$3 }' |sort | uniq -c |sort -n

## idem, sorted by tag
postags_sorted:
	ls $(EXTRA) */poslemma |$(GREP)| xargs cat |grep ' #PT' |\
        awk '{ print $$2,$$3,$$1 }' |sort | uniq -c 

ALLMWU=$(wildcard $(LASSY)/Test/*/mwu */mwu)

## lemma/postag analysis of all mwu in all suites
test.mwu: $(ALLMWU)
ifeq ($(strip $(ALLMWU)),)
	@echo "test.mwu: no mwu files"
	cat >test.mwu
else
	cat $(ALLMWU) | grep '^MWU#' | sed -e 's/MWU#//' | sort | uniq -c > test.mwu0
	paste <(cut -c9- test.mwu0) <(cut -c-8 test.mwu0) | awk '{print $$0,"TEST"}' > test.mwu
endif

TREEBANK_MWU=../Treebank/FREQ/mwu-tagged.freq

## find differences in poslemma/tag of mwu between current tests and treebank
compare.mwu: test.mwu $(TREEBANK_MWU)
	@cat test.mwu <( paste <(cut -c9- $(TREEBANK_MWU))\
                              <(cut -c-8 $(TREEBANK_MWU))  |\
        awk '{ print $$0,"TREE" }' ) |\
        tr '\t' '|' |\
        sed -e 's/  *[|]/|/g' -e 's/[|]  */|/g' |\
        LANG=POSIX sort -t\| -k1,1 |\
        awk -F\| '{ if($$1 == PREV && $$2 != PREVTAG)\
                    { print $$0; print PREVLINE; }\
                    PREV=$$1; PREVTAG=$$2; PREVLINE=$$0 }'

### STARTING TESTS

tests: ts cgns lassy.test1 ovistest.test1 Titaantjes.test1

ltests: ts lassy.test1 Titaantjes.test1

ts: cdbt g_suite.test1 h_suite.test1 i_suite.test1 extra.test1\
    leuven_yellow_pages.test1 lot_test_suite1.test1 cgn_exs.test1\
    qa.test1 wpspel.test1 novelsample_corrected.test1\
    eans.test1 m_suite.test1

cdbt: cdb_part0.test1 cdb_part1.test1 cdb_part2.test1\
      cdb_part3.test1 cdb_part4.test1 cdb_part5.test1\
      cdb_part6.test1 cdb_part7.test1 cdb_part8.test1\
      cdb_part9.test1

CGNDIR=/net/corpora/CGN-in-alpino-xml
cgns: cgn1 cgn2 cgn3 cgn4 cgn5 cgn6 cgn7 cgn8 cgn9 cgn10 cgn11 cgn12 cgn13 cgn14 cgn15 cgn16 cgn17 cgn18 cgn19 cgn20 cgn21 cgn22 cgn23 cgn24 cgn25 cgn26 cgn27 cgn28 cgn29 cgn30 cgn31 cgn32 cgn32 cgn33 cgn34 cgn35 cgn36 cgn37 cgn38 cgn39 cgn40 cgn41 cgn42 cgn43

cgn1:
	make test1 suitepath=$(CGNDIR)/comp-a/nl suite=fn000595 extra="-flag treebank $(CGNDIR)/comp-a/nl/fn000595"
cgn2:
	make test1 suitepath=$(CGNDIR)/comp-a/nl suite=fn000276 extra="-flag treebank $(CGNDIR)/comp-a/nl/fn000276"
cgn3:
	make test1 suitepath=$(CGNDIR)/comp-a/nl suite=fn000321 extra="-flag treebank $(CGNDIR)/comp-a/nl/fn000321"
cgn4:
	make test1 suitepath=$(CGNDIR)/comp-a/nl suite=fn000841 extra="-flag treebank $(CGNDIR)/comp-a/nl/fn000841"
cgn5:
	make test1 suitepath=$(CGNDIR)/comp-a/vl suite=fv400067 extra="-flag treebank $(CGNDIR)/comp-a/vl/fv400067"
cgn6:
	make test1 suitepath=$(CGNDIR)/comp-a/vl suite=fv400080 extra="-flag treebank $(CGNDIR)/comp-a/vl/fv400080"
cgn7:
	make test1 suitepath=$(CGNDIR)/comp-a/vl suite=fv400282 extra="-flag treebank $(CGNDIR)/comp-a/vl/fv400282"
cgn8:
	make test1 suitepath=$(CGNDIR)/comp-a/vl suite=fv400388 extra="-flag treebank $(CGNDIR)/comp-a/vl/fv400388"
cgn9:
	make test1 suitepath=$(CGNDIR)/comp-c/nl suite=fn008006 extra="-flag treebank $(CGNDIR)/comp-c/nl/fn008006"
cgn10:
	make test1 suitepath=$(CGNDIR)/comp-c/nl suite=fn008056 extra="-flag treebank $(CGNDIR)/comp-c/nl/fn008056"
cgn11:
	make test1 suitepath=$(CGNDIR)/comp-h/nl suite=fn009132 extra="-flag treebank $(CGNDIR)/comp-h/nl/fn009132"
cgn12:
	make test1 suitepath=$(CGNDIR)/comp-h/vl suite=fv400034 extra="-flag treebank $(CGNDIR)/comp-h/vl/fv400034"
cgn13:
	make test1 suitepath=$(CGNDIR)/comp-i/nl suite=fn007164 extra="-flag treebank $(CGNDIR)/comp-i/nl/fn007164"
cgn14:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn001602 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn001602"
cgn15:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn001604 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn001604"
cgn16:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn001769 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn001769"
cgn17:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn001826 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn001826"
cgn18:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn001949 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn001949"
cgn19:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn002034 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn002034"
cgn20:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn002068 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn002068"
cgn21:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn002157 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn002157"
cgn22:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn002157 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn002157"
cgn23:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn002910 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn002910"
cgn24:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn003374 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn003374"
cgn25:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn003439 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn003439"
cgn26:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn003577 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn003577"
cgn27:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn003972 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn003972"
cgn28:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn005610 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn005610"
cgn29:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn005740 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn005740"
cgn30:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn006104 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn006104"
cgn31:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn006104 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn006104"
cgn32:
	make test1 suitepath=$(CGNDIR)/comp-k/nl suite=fn006639 extra="-flag treebank $(CGNDIR)/comp-k/nl/fn006639"
cgn33:
	make test1 suitepath=$(CGNDIR)/comp-k/vl suite=fv600025 extra="-flag treebank $(CGNDIR)/comp-k/vl/fv600025"
cgn34:
	make test1 suitepath=$(CGNDIR)/comp-k/vl suite=fv601017 extra="-flag treebank $(CGNDIR)/comp-k/vl/fv601017"
cgn35:
	make test1 suitepath=$(CGNDIR)/comp-l/vl suite=fv600529 extra="-flag treebank $(CGNDIR)/comp-l/vl/fv600529"
cgn36:
	make test1 suitepath=$(CGNDIR)/comp-m/nl suite=fn000298 extra="-flag treebank $(CGNDIR)/comp-m/nl/fn000298"
cgn37:
	make test1 suitepath=$(CGNDIR)/comp-o/vl suite=fv800085 extra="-flag treebank $(CGNDIR)/comp-o/vl/fv800085"
cgn38:
	make test1 suitepath=$(CGNDIR)/comp-o/vl suite=fv800095 extra="-flag treebank $(CGNDIR)/comp-o/vl/fv800095"
cgn39:
	make test1 suitepath=$(CGNDIR)/comp-o/vl suite=fv800195 extra="-flag treebank $(CGNDIR)/comp-o/vl/fv800195"
cgn40:
	make test1 suitepath=$(CGNDIR)/comp-o/vl suite=fv800585 extra="-flag treebank $(CGNDIR)/comp-o/vl/fv800585"
cgn41:
	make test1 suitepath=$(CGNDIR)/comp-o/vl suite=fv800975 extra="-flag treebank $(CGNDIR)/comp-o/vl/fv800975"
cgn42:
	make test1 suitepath=$(CGNDIR)/comp-o/vl suite=fv801065 extra="-flag treebank $(CGNDIR)/comp-o/vl/fv801065"
cgn43:
	make test1 suitepath=$(CGNDIR)/comp-o/vl suite=fv801195 extra="-flag treebank $(CGNDIR)/comp-o/vl/fv801195"

hpctests:
	make job HPCTARGET=test1 suite=cdb_part cdb_part=0
	make job HPCTARGET=test1 suite=cdb_part cdb_part=1
	make job HPCTARGET=test1 suite=cdb_part cdb_part=2
	make job HPCTARGET=test1 suite=cdb_part cdb_part=3
	make job HPCTARGET=test1 suite=cdb_part cdb_part=4
	make job HPCTARGET=test1 suite=cdb_part cdb_part=5
	make job HPCTARGET=test1 suite=cdb_part cdb_part=6
	make job HPCTARGET=test1 suite=cdb_part cdb_part=7
	make job HPCTARGET=test1 suite=cdb_part cdb_part=8
	make job HPCTARGET=test1 suite=cdb_part cdb_part=9
	make shortjob HPCTARGET=test1 suite=g_suite
	make shortjob HPCTARGET=test1 suite=h_suite
	make shortjob HPCTARGET=test1 suite=i_suite
	make shortjob HPCTARGET=test1 suite=m_suite
	make shortjob HPCTARGET=test1 suite=extra
	make shortjob HPCTARGET=test1 suite=leuven_yellow_pages
	make shortjob HPCTARGET=test1 suite=lot_test_suite1
	make shortjob HPCTARGET=test1 suite=cgn_exs
	make shortjob HPCTARGET=test1 suite=qa
	make shortjob HPCTARGET=test1 suite=wpspel

